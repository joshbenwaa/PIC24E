D G "__PCD__" 0 182 ""5.071d""
D G "__DEVICE__" 0 182 "10042"
D G "__DATE__" 0 182 ""10-Aug-17""
D G "__TIME__" 0 182 ""14:43:05""
D G "_UNICODE" 0 182 ""?""
D G "__EVAL" 0 182 ""?"" "Standard Header file for the PIC24EP256GP202 device ////////////////"
c L "set_tris_a" 2 3 17 "FUNCTION"
f N "set_tris_a" 2 58 ""
v L "value" 2 58 "int16" `54 
f B "set_tris_a" 2 58 "void(int16 value)" `53 
f N "set_tris_b" 2 59 ""
v L "value" 2 59 "int16" `56 
f B "set_tris_b" 2 59 "void(int16 value)" `55 
f N "get_tris_a" 2 60 ""
f B "get_tris_a" 2 60 "int16()" `57 
f N "get_tris_b" 2 61 ""
f B "get_tris_b" 2 61 "int16()" `58 
f N "output_a" 2 62 ""
v L "value" 2 62 "int16" `60 
f B "output_a" 2 62 "void(int16 value)" `59 
f N "output_b" 2 63 ""
v L "value" 2 63 "int16" `62 
f B "output_b" 2 63 "void(int16 value)" `61 
f N "input_a" 2 64 ""
f B "input_a" 2 64 "int16()" `63 
f N "input_b" 2 65 ""
f B "input_b" 2 65 "int16()" `64 
f N "input_change_a" 2 66 ""
f B "input_change_a" 2 66 "sint16()" `65 
f N "input_change_b" 2 67 ""
f B "input_change_b" 2 67 "sint16()" `66 
f N "set_pullup" 2 68 ""
v L "state" 2 68 "int8" `68 
f B "set_pullup" 2 68 "void(int8 state)" `67 
f N "set_pullup" 2 69 ""
v L "state" 2 69 "int8" `70 
v L "pin" 2 69 "int16" `71 
f B "set_pullup" 2 69 "void(int8 state,int16 pin)" `69 
f N "set_pulldown" 2 70 ""
v L "state" 2 70 "int8" `73 
f B "set_pulldown" 2 70 "void(int8 state)" `72 
f N "set_pulldown" 2 71 ""
v L "state" 2 71 "int8" `75 
v L "pin" 2 71 "int16" `76 
f B "set_pulldown" 2 71 "void(int8 state,int16 pin)" `74 
f N "input" 2 72 ""
v L "pin" 2 72 "int16" `78 
f B "input" 2 72 "int8(int16 pin)" `77 
f N "input_state" 2 73 ""
v L "pin" 2 73 "int16" `80 
f B "input_state" 2 73 "int8(int16 pin)" `79 
f N "output_low" 2 74 ""
v L "pin" 2 74 "int16" `82 
f B "output_low" 2 74 "void(int16 pin)" `81 
f N "output_high" 2 75 ""
v L "pin" 2 75 "int16" `84 
f B "output_high" 2 75 "void(int16 pin)" `83 
f N "output_toggle" 2 76 ""
v L "pin" 2 76 "int16" `86 
f B "output_toggle" 2 76 "void(int16 pin)" `85 
f N "output_bit" 2 77 ""
v L "pin" 2 77 "int16" `88 
v L "level" 2 77 "int8" `89 
f B "output_bit" 2 77 "void(int16 pin,int8 level)" `87 
f N "output_float" 2 78 ""
v L "pin" 2 78 "int16" `91 
f B "output_float" 2 78 "void(int16 pin)" `90 
f N "output_drive" 2 79 ""
v L "pin" 2 79 "int16" `93 
f B "output_drive" 2 79 "void(int16 pin)" `92  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 82 "28688"
d G "PIN_A1" 2 83 "28689"
d G "PIN_A2" 2 84 "28690"
d G "PIN_A3" 2 85 "28691"
d G "PIN_A4" 2 86 "28692"
d G "PIN_B0" 2 88 "28816"
d G "PIN_B1" 2 89 "28817"
d G "PIN_B2" 2 90 "28818"
d G "PIN_B3" 2 91 "28819"
d G "PIN_B4" 2 92 "28820"
d G "PIN_B5" 2 93 "28821"
d G "PIN_B6" 2 94 "28822"
d G "PIN_B7" 2 95 "28823"
d G "PIN_B8" 2 96 "28824"
d G "PIN_B9" 2 97 "28825"
d G "PIN_B10" 2 98 "28826"
d G "PIN_B11" 2 99 "28827"
d G "PIN_B12" 2 100 "28828"
d G "PIN_B13" 2 101 "28829"
d G "PIN_B14" 2 102 "28830"
d G "PIN_B15" 2 103 "28831"
d G "FALSE" 2 106 "0"
d G "TRUE" 2 107 "1"
d G "BYTE" 2 109 "unsigned int8"
d G "BOOLEAN" 2 110 "int1"
d G "getc" 2 112 "getch"
d G "fgetc" 2 113 "getch"
d G "getchar" 2 114 "getch"
d G "putc" 2 115 "putchar"
d G "fputc" 2 116 "putchar"
d G "fgets" 2 117 "gets"
d G "fputs" 2 118 "puts"
c L "output_drive" 2 3 2 "FUNCTION"
f N "setup_uart" 2 122 ""
v L "baud" 2 122 "int32" `95 
f B "setup_uart" 2 122 "void(int32 baud)" `94 
f N "setup_uart" 2 123 ""
v L "baud" 2 123 "int32" `97 
v L "stream" 2 123 "int8" `98 
f B "setup_uart" 2 123 "void(int32 baud,int8 stream)" `96 
f N "setup_uart" 2 124 ""
v L "baud" 2 124 "int32" `100 
v L "stream" 2 124 "int8" `101 
v L "clock" 2 124 "int32" `102 
f B "setup_uart" 2 124 "void(int32 baud,int8 stream,int32 clock)" `99 
f N "set_uart_speed" 2 125 ""
v L "baud" 2 125 "int32" `104 
f B "set_uart_speed" 2 125 "void(int32 baud)" `103 
f N "set_uart_speed" 2 126 ""
v L "baud" 2 126 "int32" `106 
v L "stream" 2 126 "int8" `107 
f B "set_uart_speed" 2 126 "void(int32 baud,int8 stream)" `105 
f N "set_uart_speed" 2 127 ""
v L "baud" 2 127 "int32" `109 
v L "stream" 2 127 "int8" `110 
v L "clock" 2 127 "int32" `111 
f B "set_uart_speed" 2 127 "void(int32 baud,int8 stream,int32 clock)" `108  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 131 "2"
d G "UART_DATA" 2 132 "4"
d G "UART_AUTODETECT" 2 133 "8"
d G "UART_AUTODETECT_NOWAIT" 2 134 "9"
d G "UART_WAKEUP_ON_RDA" 2 135 "10"
d G "UART_SEND_BREAK" 2 136 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_wdt" 2 141 ""
v L "mode" 2 141 "int8" `113 
f B "setup_wdt" 2 141 "void(int8 mode)" `112 
f N "restart_wdt" 2 142 ""
f B "restart_wdt" 2 142 "void()" `114  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 144 "1"
d G "WDT_OFF" 2 145 "0"
d G "WDT_1MS" 2 147 "0x002"
d G "WDT_2MS" 2 148 "0x003"
d G "WDT_4MS" 2 149 "0x004"
d G "WDT_8MS" 2 150 "0x005"
d G "WDT_16MS" 2 151 "0x006"
d G "WDT_32MS" 2 152 "0x007"
d G "WDT_64MS" 2 153 "0x008"
d G "WDT_128MS" 2 154 "0x009"
d G "WDT_256MS" 2 155 "0x00A"
d G "WDT_512MS" 2 156 "0x00B"
d G "WDT_1S" 2 157 "0x00C"
d G "WDT_2S" 2 158 "0x00D"
d G "WDT_4S" 2 159 "0x00E"
d G "WDT_8S" 2 160 "0x00F"
d G "WDT_16S" 2 161 "0x010"
d G "WDT_33S" 2 162 "0x011"
d G "WDT_65S" 2 163 "0x030"
d G "WDT_131S" 2 164 "0x031"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "restart_cause" 2 169 ""
f B "restart_cause" 2 169 "int8()" `115 
f N "reset_cpu" 2 170 ""
f B "reset_cpu" 2 170 "void()" `116 
f N "sleep" 2 171 ""
f B "sleep" 2 171 "void()" `117 
f N "sleep" 2 172 ""
v L "mode" 2 172 "int8" `119 
f B "sleep" 2 172 "void(int8 mode)" `118  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 2 174 "0"
d G "RESTART_BROWNOUT" 2 175 "1"
d G "RESTART_WATCHDOG" 2 176 "4"
d G "RESTART_SOFTWARE" 2 177 "6"
d G "RESTART_MCLR" 2 178 "7"
d G "RESTART_ILLEGAL_OP" 2 179 "14"
d G "RESTART_TRAP_CONFLICT" 2 180 "15"
d G "SLEEP_FULL" 2 183 "0" "Default"
d G "SLEEP_IDLE" 2 184 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 190 ""
v L "type" 2 190 "int8" `121 
v L "target" 2 190 "int32" `122 
f B "setup_oscillator" 2 190 "void(int8 type,int32 target)" `120 
f N "setup_oscillator" 2 191 ""
v L "type" 2 191 "int8" `124 
v L "target" 2 191 "int32" `125 
v L "source" 2 191 "int32" `126 
f B "setup_oscillator" 2 191 "void(int8 type,int32 target,int32 source)" `123  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 2 193 "32"
d G "OSC_CRYSTAL" 2 194 "1"
d G "OSC_CLOCK" 2 195 "2"
d G "OSC_RC" 2 196 "3"
d G "OSC_SECONDARY" 2 197 "16"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_timer1" 2 203 ""
v L "mode" 2 203 "int16" `128 
f B "setup_timer1" 2 203 "void(int16 mode)" `127 
f N "setup_timer1" 2 204 ""
v L "mode" 2 204 "int16" `130 
v L "period" 2 204 "int16" `131 
f B "setup_timer1" 2 204 "void(int16 mode,int16 period)" `129 
f N "get_timer1" 2 205 ""
f B "get_timer1" 2 205 "int16()" `132 
f N "set_timer1" 2 206 ""
v L "value" 2 206 "int16" `134 
f B "set_timer1" 2 206 "void(int16 value)" `133 
f N "setup_timer2" 2 207 ""
v L "mode" 2 207 "int16" `136 
f B "setup_timer2" 2 207 "void(int16 mode)" `135 
f N "setup_timer2" 2 208 ""
v L "mode" 2 208 "int16" `138 
v L "period" 2 208 "int16" `139 
f B "setup_timer2" 2 208 "void(int16 mode,int16 period)" `137 
f N "get_timer2" 2 209 ""
f B "get_timer2" 2 209 "int16()" `140 
f N "set_timer2" 2 210 ""
v L "value" 2 210 "int16" `142 
f B "set_timer2" 2 210 "void(int16 value)" `141 
f N "setup_timer3" 2 211 ""
v L "mode" 2 211 "int16" `144 
f B "setup_timer3" 2 211 "void(int16 mode)" `143 
f N "setup_timer3" 2 212 ""
v L "mode" 2 212 "int16" `146 
v L "period" 2 212 "int16" `147 
f B "setup_timer3" 2 212 "void(int16 mode,int16 period)" `145 
f N "get_timer3" 2 213 ""
f B "get_timer3" 2 213 "int16()" `148 
f N "set_timer3" 2 214 ""
v L "value" 2 214 "int16" `150 
f B "set_timer3" 2 214 "void(int16 value)" `149 
f N "get_timer23" 2 215 ""
f B "get_timer23" 2 215 "int32()" `151 
f N "set_timer23" 2 216 ""
v L "value" 2 216 "int32" `153 
f B "set_timer23" 2 216 "void(int32 value)" `152 
f N "setup_timer4" 2 217 ""
v L "mode" 2 217 "int16" `155 
f B "setup_timer4" 2 217 "void(int16 mode)" `154 
f N "setup_timer4" 2 218 ""
v L "mode" 2 218 "int16" `157 
v L "period" 2 218 "int16" `158 
f B "setup_timer4" 2 218 "void(int16 mode,int16 period)" `156 
f N "get_timer4" 2 219 ""
f B "get_timer4" 2 219 "int16()" `159 
f N "set_timer4" 2 220 ""
v L "value" 2 220 "int16" `161 
f B "set_timer4" 2 220 "void(int16 value)" `160 
f N "setup_timer5" 2 221 ""
v L "mode" 2 221 "int16" `163 
f B "setup_timer5" 2 221 "void(int16 mode)" `162 
f N "setup_timer5" 2 222 ""
v L "mode" 2 222 "int16" `165 
v L "period" 2 222 "int16" `166 
f B "setup_timer5" 2 222 "void(int16 mode,int16 period)" `164 
f N "get_timer5" 2 223 ""
f B "get_timer5" 2 223 "int16()" `167 
f N "set_timer5" 2 224 ""
v L "value" 2 224 "int16" `169 
f B "set_timer5" 2 224 "void(int16 value)" `168 
f N "get_timer45" 2 225 ""
f B "get_timer45" 2 225 "int32()" `170 
f N "set_timer45" 2 226 ""
v L "value" 2 226 "int32" `172 
f B "set_timer45" 2 226 "void(int32 value)" `171  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 2 229 "0x0000"
d G "TMR_INTERNAL" 2 230 "0x8000"
d G "TMR_EXTERNAL" 2 231 "0x8002"
d G "TMR_EXTERNAL_SYNC" 2 232 "0x8006" "This only applies to Timer1"
d G "TMR_EXTERNAL_RTC" 2 233 "0xC002" "This only applies to Timer1"
d G "TMR_DIV_BY_1" 2 236 "0x0000"
d G "TMR_DIV_BY_8" 2 237 "0x0010"
d G "TMR_DIV_BY_64" 2 238 "0x0020"
d G "TMR_DIV_BY_256" 2 239 "0x0030"
d G "TMR_HALT_IDLE" 2 241 "0x2000"
d G "TMR_CONTINUE_IDLE" 2 242 "0x0000"
d G "TMR_32_BIT" 2 244 "0x0008" "Only for even numbered timers"
d G "TMR_GATE" 2 245 "0x0040"
c L "set_timer45" 2 3 3 "FUNCTION"
f N "setup_capture" 2 250 ""
v L "module" 2 250 "int8" `174 
v L "mode" 2 250 "int32" `175 
f B "setup_capture" 2 250 "void(int8 module,int32 mode)" `173 
f N "get_capture" 2 251 ""
v L "module" 2 251 "int8" `177 
f B "get_capture" 2 251 "int16(int8 module)" `176 
f N "get_capture" 2 252 ""
v L "module" 2 252 "int8" `179 
v L "wait" 2 252 "int8" `180 
f B "get_capture" 2 252 "int16(int8 module,int8 wait)" `178 
f N "get_capture32" 2 253 ""
v L "module" 2 253 "int8" `182 
f B "get_capture32" 2 253 "int32(int8 module)" `181 
f N "get_capture32" 2 254 ""
v L "module" 2 254 "int8" `184 
v L "wait" 2 254 "int8" `185 
f B "get_capture32" 2 254 "int32(int8 module,int8 wait)" `183  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 2 256 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 2 257 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 2 258 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 2 259 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 2 260 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 2 261 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 2 262 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 2 265 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 2 266 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 2 267 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 2 268 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER1" 2 271 "0x1000"
d G "CAPTURE_TIMER2" 2 272 "0x0400"
d G "CAPTURE_TIMER3" 2 273 "0x0000"
d G "CAPTURE_TIMER4" 2 274 "0x0800"
d G "CAPTURE_TIMER5" 2 275 "0x0C00"
d G "CAPTURE_SYSTEM_CLOCK" 2 276 "0x1C00"
d G "CAPTURE_HALT_IDLE" 2 279 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 2 280 "0x0000" "Capture module continues during idle mode"
d G "CAPTURE_32_BIT" 2 283 "0x01000000" "Only used with odd number capture units"
d G "CAPTURE_16_BIT" 2 284 "0"
d G "CAPTURE_TRIGGER" 2 288 "0x00800000"
d G "CAPTURE_SYNCHRONIZE" 2 289 "0"
d G "CAPTURE_TRIG_SYNC_NONE" 2 293 "0x00000000"
d G "CAPTURE_TRIG_SYNC_OC1" 2 294 "0x00010000"
d G "CAPTURE_TRIG_SYNC_OC2" 2 295 "0x00020000"
d G "CAPTURE_TRIG_SYNC_OC3" 2 296 "0x00030000"
d G "CAPTURE_TRIG_SYNC_OC4" 2 297 "0x00040000"
d G "CAPTURE_TRIG_SYNC_PTGOx" 2 298 "0x000A0000"
d G "CAPTURE_TRIG_SYNC_TIMER1" 2 299 "0x000B0000"
d G "CAPTURE_TRIG_SYNC_TIMER2" 2 300 "0x000C0000"
d G "CAPTURE_TRIG_SYNC_TIMER3" 2 301 "0x000D0000"
d G "CAPTURE_TRIG_SYNC_TIMER4" 2 302 "0x000E0000"
d G "CAPTURE_TRIG_SYNC_TIMER5" 2 303 "0x000F0000"
d G "CAPTURE_TRIG_SYNC_IC1" 2 304 "0x00100000"
d G "CAPTURE_TRIG_SYNC_IC2" 2 305 "0x00110000"
d G "CAPTURE_TRIG_SYNC_IC3" 2 306 "0x00120000"
d G "CAPTURE_TRIG_SYNC_IC4" 2 307 "0x00130000"
d G "CAPTURE_TRIG_SYNC_COMP1" 2 308 "0x00180000" "Trigger Source only"
d G "CAPTURE_TRIG_SYNC_COMP2" 2 309 "0x00190000" "Trigger Source only"
d G "CAPTURE_TRIG_SYNC_COMP3" 2 310 "0x001A0000" "Trigger Source only"
d G "CAPTURE_TRIG_SYNC_ADC" 2 311 "0x001B0000" "Trigger Source only"
d G "CAPTURE_TRIG_SYNC_CTMU" 2 312 "0x001C0000" "Trigger Source only"
c L "get_capture32" 2 3 4 "FUNCTION"
f N "setup_compare" 2 318 ""
v L "module" 2 318 "int8" `187 
v L "mode" 2 318 "int32" `188 
f B "setup_compare" 2 318 "void(int8 module,int32 mode)" `186 
f N "set_pwm_duty" 2 319 ""
v L "module" 2 319 "int8" `190 
v L "duty" 2 319 "int16" `191 
f B "set_pwm_duty" 2 319 "void(int8 module,int16 duty)" `189 
f N "set_compare_time" 2 320 ""
v L "module" 2 320 "int8" `193 
v L "ocr" 2 320 "int16" `194 
f B "set_compare_time" 2 320 "void(int8 module,int16 ocr)" `192 
f N "set_compare_time" 2 321 ""
v L "module" 2 321 "int8" `196 
v L "ocr" 2 321 "int16" `197 
v L "ocrs" 2 321 "int16" `198 
f B "set_compare_time" 2 321 "void(int8 module,int16 ocr,int16 ocrs)" `195 
f N "set_pwm_period" 2 322 ""
v L "module" 2 322 "int8" `200 
v L "period" 2 322 "int16" `201 
f B "set_pwm_period" 2 322 "void(int8 module,int16 period)" `199  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 2 324 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 2 325 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 2 326 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGLE" 2 327 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 2 328 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 2 329 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM_EDGE" 2 330 "0x0006"
d G "COMPARE_PWM_CENTER" 2 331 "0x0007"
d G "COMPARE_TIMER2" 2 334 "0x0000"
d G "COMPARE_TIMER3" 2 335 "0x0400"
d G "COMPARE_TIMER4" 2 336 "0x0800"
d G "COMPARE_TIMER5" 2 337 "0x0C00"
d G "COMPARE_TIMER1" 2 338 "0x1000"
d G "COMPARE_SYSTEM_CLOCK" 2 339 "0x1C00"
d G "COMPARE_FAULTA" 2 342 "0x0080"
d G "COMPARE_FAULTB" 2 343 "0x0100"
d G "COMPARE_FAULT_CLEARED_SW" 2 346 "0x80000000"
d G "COMPARE_HIGH_ON_FAULT" 2 347 "0x40000000"
d G "COMPARE_LOW_ON_FAULT" 2 348 "0x00000000"
d G "COMPARE_TRISTATE_ON_FAULT" 2 349 "0x20000000"
d G "COMPARE_INVERT_OUTPUT" 2 350 "0x10000000"
d G "COMPARE_32_BIT" 2 351 "0x01000000"
d G "COMPARE_TRIGGER" 2 352 "0x00800000"
d G "COMPARE_SYNCHRONIZE" 2 353 "0x00000000"
d G "COMPARE_OUTPUT_TRISTATED" 2 354 "0x00200000"
d G "COMPARE_TRIG_SYNC_SELF" 2 358 "0x001F0000"
d G "COMPARE_TRIG_SYNC_INT2" 2 359 "0x001E0000"
d G "COMPARE_TRIG_SYNC_INT1" 2 360 "0x001D0000"
d G "COMPARE_TRIG_SYNC_CTMU" 2 361 "0x001C0000"
d G "COMPARE_TRIG_SYNC_ADC1" 2 362 "0x001B0000"
d G "COMPARE_TRIG_SYNC_COMP3" 2 363 "0x001A0000"
d G "COMPARE_TRIG_SYNC_COMP2" 2 364 "0x00190000"
d G "COMPARE_TRIG_SYNC_COMP1" 2 365 "0x00180000"
d G "COMPARE_TRIG_SYNC_IC4" 2 366 "0x00130000"
d G "COMPARE_TRIG_SYNC_IC3" 2 367 "0x00120000"
d G "COMPARE_TRIG_SYNC_IC2" 2 368 "0x00110000"
d G "COMPARE_TRIG_SYNC_IC1" 2 369 "0x00100000"
d G "COMPARE_TRIG_SYNC_TIMER5" 2 370 "0x000F0000"
d G "COMPARE_TRIG_SYNC_TIMER4" 2 371 "0x000E0000"
d G "COMPARE_TRIG_SYNC_TIMER3" 2 372 "0x000D0000"
d G "COMPARE_TRIG_SYNC_TIMER2" 2 373 "0x000C0000"
d G "COMPARE_TRIG_SYNC_TIMER1" 2 374 "0x000B0000"
d G "COMPARE_TRIG_SYNC_PTGOx" 2 375 "0x000A0000"
d G "COMPARE_TRIG_SYNC_OC4" 2 376 "0x00040000"
d G "COMPARE_TRIG_SYNC_OC3" 2 377 "0x00030000"
d G "COMPARE_TRIG_SYNC_OC2" 2 378 "0x00020000"
d G "COMPARE_TRIG_SYNC_OC1" 2 379 "0x00010000"
d G "COMPARE_TRIG_SYNC_NONE" 2 380 "0x00000000"
c L "set_pwm_period" 2 3 3 "FUNCTION"
f N "setup_spi" 2 385 ""
v L "mode" 2 385 "int16" `203 
f B "setup_spi" 2 385 "void(int16 mode)" `202 
f N "spi_write" 2 386 ""
v L "data" 2 386 "int8" `205 
f B "spi_write" 2 386 "void(int8 data)" `204 
f N "spi_write" 2 387 ""
v L "wait" 2 387 "int8" `207 
v L "data" 2 387 "int8" `208 
f B "spi_write" 2 387 "void(int8 wait,int8 data)" `206 
f N "spi_write_16" 2 388 ""
v L "data" 2 388 "int16" `210 
f B "spi_write_16" 2 388 "void(int16 data)" `209 
f N "spi_write_16" 2 389 ""
v L "wait" 2 389 "int8" `212 
v L "data" 2 389 "int16" `213 
f B "spi_write_16" 2 389 "void(int8 wait,int16 data)" `211 
f N "spi_read" 2 390 ""
f B "spi_read" 2 390 "int8()" `214 
f N "spi_read" 2 391 ""
v L "data" 2 391 "int8" `216 
f B "spi_read" 2 391 "int8(int8 data)" `215 
f N "spi_read_16" 2 392 ""
f B "spi_read_16" 2 392 "int16()" `217 
f N "spi_read_16" 2 393 ""
v L "data" 2 393 "int16" `219 
f B "spi_read_16" 2 393 "int16(int16 data)" `218 
f N "spi_data_is_in" 2 394 ""
f B "spi_data_is_in" 2 394 "int8()" `220 
f N "setup_spi2" 2 395 ""
v L "mode" 2 395 "int16" `222 
f B "setup_spi2" 2 395 "void(int16 mode)" `221 
f N "spi_write2" 2 396 ""
v L "data" 2 396 "int8" `224 
f B "spi_write2" 2 396 "void(int8 data)" `223 
f N "spi_write2" 2 397 ""
v L "wait" 2 397 "int8" `226 
v L "data" 2 397 "int8" `227 
f B "spi_write2" 2 397 "void(int8 wait,int8 data)" `225 
f N "spi_write2_16" 2 398 ""
v L "data" 2 398 "int16" `229 
f B "spi_write2_16" 2 398 "void(int16 data)" `228 
f N "spi_write2_16" 2 399 ""
v L "wait" 2 399 "int8" `231 
v L "data" 2 399 "int16" `232 
f B "spi_write2_16" 2 399 "void(int8 wait,int16 data)" `230 
f N "spi_read2" 2 400 ""
f B "spi_read2" 2 400 "int8()" `233 
f N "spi_read2" 2 401 ""
v L "data" 2 401 "int8" `235 
f B "spi_read2" 2 401 "int8(int8 data)" `234 
f N "spi_read2_16" 2 402 ""
f B "spi_read2_16" 2 402 "int16()" `236 
f N "spi_read2_16" 2 403 ""
v L "data" 2 403 "int16" `238 
f B "spi_read2_16" 2 403 "int16(int16 data)" `237 
f N "spi_data_is_in2" 2 404 ""
f B "spi_data_is_in2" 2 404 "int8()" `239  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 2 407 "0x0020"
d G "SPI_SLAVE" 2 408 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 2 410 "0x0040"
d G "SPI_SCK_IDLE_LOW" 2 411 "0x0000"
d G "SPI_XMIT_L_TO_H" 2 413 "0x0100"
d G "SPI_XMIT_H_TO_L" 2 414 "0x0000"
d G "SPI_MODE_16B" 2 416 "0x0400"
d G "SPI_MODE_8B" 2 417 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 419 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 2 420 "0x0000"
d G "SPI_SS_ENABLED" 2 422 "0x0000"
d G "SPI_SS_DISABLED" 2 423 "0x0080"
d G "SPI_CLK_DIV_1" 2 426 "0x001F"
d G "SPI_CLK_DIV_2" 2 427 "0x001B"
d G "SPI_CLK_DIV_3" 2 428 "0x0017"
d G "SPI_CLK_DIV_4" 2 429 "0x001E"
d G "SPI_CLK_DIV_5" 2 430 "0x000F"
d G "SPI_CLK_DIV_6" 2 431 "0x000B"
d G "SPI_CLK_DIV_7" 2 432 "0x0007"
d G "SPI_CLK_DIV_8" 2 433 "0x0003"
d G "SPI_CLK_DIV_12" 2 434 "0x0016"
d G "SPI_CLK_DIV_16" 2 435 "0x001D"
d G "SPI_CLK_DIV_20" 2 436 "0x000E"
d G "SPI_CLK_DIV_24" 2 437 "0x000A"
d G "SPI_CLK_DIV_28" 2 438 "0x0006"
d G "SPI_CLK_DIV_32" 2 439 "0x0002"
d G "SPI_CLK_DIV_48" 2 440 "0x0015"
d G "SPI_CLK_DIV_64" 2 441 "0x001C"
d G "SPI_CLK_DIV_80" 2 442 "0x000D"
d G "SPI_CLK_DIV_96" 2 443 "0x0009"
d G "SPI_CLK_DIV_112" 2 444 "0x0005"
d G "SPI_CLK_DIV_128" 2 445 "0x0001"
d G "SPI_CLK_DIV_192" 2 446 "0x0014"
d G "SPI_CLK_DIV_256" 2 447 "0x0010"
d G "SPI_CLK_DIV_320" 2 448 "0x000C"
d G "SPI_CLK_DIV_384" 2 449 "0x0008"
d G "SPI_CLK_DIV_448" 2 450 "0x0004"
d G "SPI_CLK_DIV_512" 2 451 "0x0000"
d G "SPI_L_TO_H" 2 454 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 455 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 4 "FUNCTION"
f N "setup_adc" 2 461 ""
v L "mode" 2 461 "int32" `241 
f B "setup_adc" 2 461 "void(int32 mode)" `240 
f N "setup_adc_ports" 2 462 ""
v L "pins" 2 462 "int32" `243 
f B "setup_adc_ports" 2 462 "void(int32 pins)" `242 
f N "setup_adc_ports" 2 463 ""
v L "pins" 2 463 "int32" `245 
v L "reference" 2 463 "int16" `246 
f B "setup_adc_ports" 2 463 "void(int32 pins,int16 reference)" `244 
f N "set_adc_channel" 2 464 ""
v L "channel" 2 464 "int8" `248 
f B "set_adc_channel" 2 464 "void(int8 channel)" `247 
f N "set_adc_channel" 2 465 ""
v L "channel" 2 465 "int8" `250 
v L "neg_channel" 2 465 "int8" `251 
f B "set_adc_channel" 2 465 "void(int8 channel,int8 neg_channel)" `249 
f N "read_adc" 2 466 ""
f B "read_adc" 2 466 "int16()" `252 
f N "read_adc" 2 467 ""
v L "mode" 2 467 "int8" `254 
f B "read_adc" 2 467 "int16(int8 mode)" `253 
f N "adc_done" 2 468 ""
f B "adc_done" 2 468 "int8()" `255  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 472 "0x10000"
d G "ADC_CLOCK" 2 473 "0x0000"
d G "ADC_CLOCK_DIV_2" 2 474 "0x0001"
d G "ADC_CLOCK_DIV_4" 2 475 "0x0003"
d G "ADC_CLOCK_DIV_8" 2 476 "0x0007"
d G "ADC_CLOCK_DIV_16" 2 477 "0x000F"
d G "ADC_CLOCK_DIV_32" 2 478 "0x001F"
d G "ADC_CLOCK_DIV_64" 2 479 "0x003F"
d G "ADC_CLOCK_DIV_128" 2 480 "0x007F"
d G "ADC_CLOCK_DIV_256" 2 481 "0x00FF"
d G "ADC_CLOCK_INTERNAL" 2 482 "0x8000" "Internal"
d G "ADC_TAD_MUL_0" 2 486 "0x1F00"
d G "ADC_TAD_MUL_2" 2 487 "0x1D00"
d G "ADC_TAD_MUL_4" 2 488 "0x1B00"
d G "ADC_TAD_MUL_8" 2 489 "0x1700"
d G "ADC_TAD_MUL_16" 2 490 "0x0F00"
d G "ADC_TAD_MUL_31" 2 491 "0x0000"
d G "ADC_START_AND_READ" 2 494 "0x07"
d G "ADC_START_ONLY" 2 495 "0x01"
d G "ADC_READ_ONLY" 2 496 "0x06"
d G "VSS" 2 499 "0"
d G "NO_ANALOGS" 2 504 "0" "None"
d G "ALL_ANALOG" 2 505 "0xFFFFFFFF" "All"
d G "sAN0" 2 506 "0x00000001" "| A0"
d G "sAN1" 2 507 "0x00000002" "| A1"
d G "sAN2" 2 508 "0x00000004" "| B0"
d G "sAN3" 2 509 "0x00000008" "| B1"
d G "sAN4" 2 510 "0x00000010" "| B2"
d G "sAN5" 2 511 "0x00000020" "| B3"
d G "VSS_VDD" 2 514 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 2 515 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 2 516 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 2 517 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 3 4 "FUNCTION"
f N "setup_comparator" 2 523 ""
v L "comparator" 2 523 "int8" `257 
v L "mode" 2 523 "int16" `258 
f B "setup_comparator" 2 523 "void(int8 comparator,int16 mode)" `256 
f N "setup_comparator_filter" 2 524 ""
v L "comparator" 2 524 "int8" `260 
v L "mode" 2 524 "int16" `261 
f B "setup_comparator_filter" 2 524 "void(int8 comparator,int16 mode)" `259 
f N "setup_comparator_mask" 2 525 ""
v L "comparator" 2 525 "int8" `263 
v L "mode" 2 525 "int16" `264 
f B "setup_comparator_mask" 2 525 "void(int8 comparator,int16 mode)" `262 
f N "setup_comparator_mask" 2 526 ""
v L "comparator" 2 526 "int8" `266 
v L "mode" 2 526 "int16" `267 
v L "input1" 2 526 "int16" `268 
f B "setup_comparator_mask" 2 526 "void(int8 comparator,int16 mode,int16 input1)" `265 
f N "setup_comparator_mask" 2 527 ""
v L "comparator" 2 527 "int8" `270 
v L "mode" 2 527 "int16" `271 
v L "input1" 2 527 "int16" `272 
v L "input2" 2 527 "int16" `273 
f B "setup_comparator_mask" 2 527 "void(int8 comparator,int16 mode,int16 input1,int16 input2)" `269 
f N "setup_comparator_mask" 2 528 ""
v L "comparator" 2 528 "int8" `275 
v L "mode" 2 528 "int16" `276 
v L "input1" 2 528 "int16" `277 
v L "input2" 2 528 "int16" `278 
v L "input3" 2 528 "int16" `279 
f B "setup_comparator_mask" 2 528 "void(int8 comparator,int16 mode,int16 input1,int16 input2,int16 input3)" `274  "Constants used in SETUP_COMPARATOR() second param are: - first param is the comparator number."
d G "NC_NC" 2 530 "0x0000"
d G "CXIN1_CXIN1" 2 531 "0x8000"
d G "CXIN2_CXIN1" 2 532 "0x8001" "Comparator 1,2,3 only"
d G "CXIN1_VREF" 2 533 "0x8010"
d G "CXIN2_VREF" 2 534 "0x8011" "Comparator 1,2,3 only"
d G "COMP1_C4IN1" 2 535 "0x8001" "Comparator 4 only"
d G "COMP2_C4IN1" 2 536 "0x8002" "Comparator 4 only"
d G "COMP3_C4IN1" 2 537 "0x8003" "Comparator 4 only"
d G "COMP1_VREF" 2 538 "0x8011" "Comparator 4 only"
d G "COMP2_VREF" 2 539 "0x8012" "Comparator 4 only"
d G "COMP3_VREF" 2 540 "0x8013" "Comparator 4 only"
d G "COMP_OPAMP" 2 542 "0x0400" "Circuit operates as an Op Amp, Comparator 1,2,3 only"
d G "COMP_INVERT" 2 543 "0x2000" "Invert output"
d G "COMP_OUTPUT" 2 544 "0x4000" "Output on pin"
d G "COMP_INTR" 2 545 "0x0040" "Generate interrupt on high"
d G "COMP_INTR_INV" 2 546 "0x0080" "Generate interrupt on low"
d G "COMP_INTR_CHANGE" 2 547 "0x00C0" "Generate interrupt on change"
d G "COMP_FILTER_DISABLE" 2 550 "0x0000"
d G "COMP_FILTER_ENABLE" 2 551 "0x0008"
d G "COMP_FILTER_CLK_T5" 2 553 "0x0070"
d G "COMP_FILTER_CLK_T4" 2 554 "0x0060"
d G "COMP_FILTER_CLK_T3" 2 555 "0x0050"
d G "COMP_FILTER_CLK_T2" 2 556 "0x0040"
d G "COMP_FILTER_CLK_SYNCO2" 2 557 "0x0030"
d G "COMP_FILTER_CLK_SYNCO1" 2 558 "0x0020"
d G "COMP_FILTER_CLK_FOSC" 2 559 "0x0010"
d G "COMP_FILTER_CLK_INTERNAL" 2 560 "0x0000"
d G "COMP_FILTER_CLK_DIV_BY_128" 2 562 "0x0007"
d G "COMP_FILTER_CLK_DIV_BY_64" 2 563 "0x0006"
d G "COMP_FILTER_CLK_DIV_BY_32" 2 564 "0x0005"
d G "COMP_FILTER_CLK_DIV_BY_16" 2 565 "0x0004"
d G "COMP_FILTER_CLK_DIV_BY_8" 2 566 "0x0003"
d G "COMP_FILTER_CLK_DIV_BY_4" 2 567 "0x0002"
d G "COMP_FILTER_CLK_DIV_BY_2" 2 568 "0x0001"
d G "COMP_FILTER_CLK_DIV_BY_1" 2 569 "0x0000"
d G "COMP_MASK_COMP_HIGH" 2 572 "0x0000"
d G "COMP_MASK_COMP_LOW" 2 573 "0x8000"
d G "COMP_MASK_MCI_CONNECTED_TO_OR" 2 575 "0x2000"
d G "COMP_MASK_INVERTED_MCI_CONNECTED_TO_OR" 2 576 "0x1000"
d G "COMP_MASK_MBI_CONNECTED_TO_OR" 2 577 "0x0800"
d G "COMP_MASK_INVERTED_MBI_CONNECTED_TO_OR" 2 578 "0x0400"
d G "COMP_MASK_MAI_CONNETED_TO_OR" 2 579 "0x0200"
d G "COMP_MASK_INVERTED_MAI_CONNECTED_TO_OR" 2 580 "0x0100"
d G "COMP_MASK_INVERTED_ANDI_CONNECTED_TO_OR" 2 581 "0x0080"
d G "COMP_MASK_ANDI_CONNECTED_TO_OR" 2 582 "0x0040"
d G "COMP_MASK_MCI_CONNECTED_TO_AND" 2 583 "0x0020"
d G "COMP_MASK_INVERTED_MCI_CONNECTED_TO_AND" 2 584 "0x0010"
d G "COMP_MASK_MBI_CONNECTED_TO_AND" 2 585 "0x0008"
d G "COMP_MASK_INVERTED_MBI_CONNECTED_TO_AND" 2 586 "0x0004"
d G "COMP_MASK_MAI_CONNECTED_TO_AND" 2 587 "0x0002"
d G "COMP_MASK_INVERTED_MAI_CONNECTED_TO_AND" 2 588 "0x0001"
d G "COMP_MASK_INPUT_FLT4" 2 590 "0x000F"
d G "COMP_MASK_INPUT_FLT2" 2 591 "0x000E"
d G "COMP_MASK_INPUT_PTGO19" 2 592 "0x000D"
d G "COMP_MASK_INPUT_PTGO18" 2 593 "0x000C"
d G "COMP_MASK_INPUT_PWM3H" 2 594 "0x0005"
d G "COMP_MASK_INPUT_PWM3L" 2 595 "0x0004"
d G "COMP_MASK_INPUT_PWM2H" 2 596 "0x0003"
d G "COMP_MASK_INPUT_PWM2L" 2 597 "0x0002"
d G "COMP_MASK_INPUT_PWM1H" 2 598 "0x0001"
d G "COMP_MASK_INPUT_PWM1L" 2 599 "0x0000"
c L "setup_comparator_mask" 2 3 1 "FUNCTION"
c L "setup_comparator_mask" 2 3 1 "FUNCTION"
c L "setup_comparator_mask" 2 3 1 "FUNCTION"
c L "setup_comparator_mask" 2 3 3 "FUNCTION"
f N "setup_vref" 2 612 ""
v L "mode" 2 612 "int16" `289 
f B "setup_vref" 2 612 "void(int16 mode)" `288  "Constants used in setup_vref() are:"
d G "VREF_DISABLED" 2 614 "0x0000"
d G "VREF_VSS_VDD" 2 615 "0x0080"
d G "VREF_ANALOG" 2 616 "0x0090"
d G "VREF_HIGH" 2 618 "0x0080"
d G "VREF_LOW" 2 619 "0x00A0"
d G "VREF_CVREF_IS_VREF" 2 621 "0x0400" "CVref+ = VREF+"
d G "VREF_OUTPUT" 2 622 "0x0040"
d G "VREF_OUTPUT_CVREF2" 2 623 "0x04000" "(AVDD - AVSS)/2 is connected to the CVREF2O pin"
c L "setup_vref" 2 3 5 "FUNCTION"
f N "setup_crc" 2 630 ""
v L "poly_terms" 2 630 "int8" `291 
f B "setup_crc" 2 630 "void(int8 poly_terms,*int8 _VA_LIST)" `290 
f N "crc_init" 2 631 ""
v L "value" 2 631 "int32" `294 
f B "crc_init" 2 631 "void(int32 value)" `293 
f N "crc_calc32" 2 632 ""
v L "data" 2 632 "int32" `296 
f B "crc_calc32" 2 632 "int32(int32 data)" `295 
f N "crc_calc32" 2 633 ""
v L "data" 2 633 "int32" `298 
v L "width" 2 633 "int8" `299 
f B "crc_calc32" 2 633 "int32(int32 data,int8 width)" `297 
f N "crc_calc32" 2 634 ""
v L "ptr" 2 634 "*int32" `301 
v L "count" 2 634 "int16" `302 
f B "crc_calc32" 2 634 "int32(*int32 ptr,int16 count)" `300 
f N "crc_calc32" 2 635 ""
v L "ptr" 2 635 "*int32" `304 
v L "count" 2 635 "int16" `305 
v L "width" 2 635 "int8" `306 
f B "crc_calc32" 2 635 "int32(*int32 ptr,int16 count,int8 width)" `303 
f N "crc_calc16" 2 636 ""
v L "data" 2 636 "int16" `308 
f B "crc_calc16" 2 636 "int16(int16 data)" `307 
f N "crc_calc16" 2 637 ""
v L "data" 2 637 "int16" `310 
v L "width" 2 637 "int8" `311 
f B "crc_calc16" 2 637 "int16(int16 data,int8 width)" `309 
f N "crc_calc16" 2 638 ""
v L "ptr" 2 638 "*int16" `313 
v L "count" 2 638 "int16" `314 
f B "crc_calc16" 2 638 "int16(*int16 ptr,int16 count)" `312 
f N "crc_calc16" 2 639 ""
v L "ptr" 2 639 "*int16" `316 
v L "count" 2 639 "int16" `317 
v L "width" 2 639 "int8" `318 
f B "crc_calc16" 2 639 "int16(*int16 ptr,int16 count,int8 width)" `315 
f N "crc_calc8" 2 640 ""
v L "data" 2 640 "int8" `320 
f B "crc_calc8" 2 640 "int8(int8 data)" `319 
f N "crc_calc8" 2 641 ""
v L "data" 2 641 "int8" `322 
v L "width" 2 641 "int8" `323 
f B "crc_calc8" 2 641 "int8(int8 data,int8 width)" `321 
f N "crc_calc8" 2 642 ""
v L "ptr" 2 642 "*int8" `325 
v L "count" 2 642 "int16" `326 
f B "crc_calc8" 2 642 "int8(*int8 ptr,int16 count)" `324 
f N "crc_calc8" 2 643 ""
v L "ptr" 2 643 "*int8" `328 
v L "count" 2 643 "int16" `329 
v L "width" 2 643 "int8" `330 
f B "crc_calc8" 2 643 "int8(*int8 ptr,int16 count,int8 width)" `327 
f N "crc_calc" 2 644 ""
v L "data" 2 644 "int16" `332 
f B "crc_calc" 2 644 "int16(int16 data)" `331 
f N "crc_calc" 2 645 ""
v L "data" 2 645 "int16" `334 
v L "width" 2 645 "int8" `335 
f B "crc_calc" 2 645 "int16(int16 data,int8 width)" `333 
f N "crc_calc" 2 646 ""
v L "ptr" 2 646 "*int16" `337 
v L "count" 2 646 "int16" `338 
f B "crc_calc" 2 646 "int16(*int16 ptr,int16 count)" `336 
f N "crc_calc" 2 647 ""
v L "ptr" 2 647 "*int16" `340 
v L "count" 2 647 "int16" `341 
v L "width" 2 647 "int8" `342 
f B "crc_calc" 2 647 "int16(*int16 ptr,int16 count,int8 width)" `339  "Constants used in setup_crc() are:"
d G "CRC_LITTLE_ENDIAN" 2 649 "128"
c L "crc_calc" 2 3 3 "FUNCTION"
f N "setup_dma" 2 654 ""
v L "channel" 2 654 "int8" `344 
v L "pheripheral" 2 654 "int32" `345 
v L "mode" 2 654 "int8" `346 
f B "setup_dma" 2 654 "void(int8 channel,int32 pheripheral,int8 mode)" `343 
f N "dma_start" 2 655 ""
v L "channel" 2 655 "int8" `348 
v L "mode" 2 655 "int16" `349 
v L "addressa" 2 655 "int16" `350 
f B "dma_start" 2 655 "void(int8 channel,int16 mode,int16 addressa)" `347 
f N "dma_start" 2 656 ""
v L "channel" 2 656 "int8" `352 
v L "mode" 2 656 "int16" `353 
v L "addressa" 2 656 "int16" `354 
v L "count" 2 656 "int16" `355 
f B "dma_start" 2 656 "void(int8 channel,int16 mode,int16 addressa,int16 count)" `351 
f N "dma_start" 2 657 ""
v L "channel" 2 657 "int8" `352 
v L "mode" 2 657 "int16" `353 
v L "addressa" 2 657 "int16" `354 
v L "addressb" 2 657 "int16" `360 
f G "dma_start" 2 657 "void(int8 channel,int16 mode,int16 addressa,int16 addressb,int16 count)" `356 
f N "dma_start" 2 658 ""
v L "channel" 2 658 "int8" `357 
v L "mode" 2 658 "int16" `358 
v L "addressa" 2 658 "int16" `359 
v L "addressb" 2 658 "int16" `360 
v L "count" 2 658 "int16" `361 
f B "dma_start" 2 658 "void(int8 channel,int16 mode,int16 addressa,int16 addressb,int16 count)" `356 
f N "dma_status" 2 659 ""
v L "channel" 2 659 "int8" `363 
f B "dma_status" 2 659 "int8(int8 channel)" `362  "Constants used in setup_dma() second param are:"
d G "DMA_IN_SPI1" 2 661 " (0x0A0000|getenv("sfr:SPI1BUF"))"
d G "DMA_OUT_SPI1" 2 662 " (0x8A0000|getenv("sfr:SPI1BUF"))"
d G "DMA_IN_SPI2" 2 663 " (0x210000|getenv("sfr:SPI2BUF"))"
d G "DMA_OUT_SPI2" 2 664 " (0xA10000|getenv("sfr:SPI2BUF"))"
d G "DMA_IN_UART1" 2 665 " (0x0B0000|getenv("sfr:U1RXREG"))"
d G "DMA_OUT_UART1" 2 666 " (0x8C0000|getenv("sfr:U1TXREG"))"
d G "DMA_IN_UART2" 2 667 " (0x1E0000|getenv("sfr:U2RXREG"))"
d G "DMA_OUT_UART2" 2 668 " (0x9F0000|getenv("sfr:U2TXREG"))"
d G "DMA_IN_ADC1" 2 669 " (0x0D0000|getenv("sfr:ADC1BUF0"))"
d G "DMA_IN_ECAN1" 2 670 " (0x220000|getenv("sfr:C1RXD"))"
d G "DMA_OUT_ECAN1" 2 671 " (0xC60000|getenv("sfr:C1TXD"))"
d G "DMA_INT0" 2 672 "0x000000" "or in direction and perif address"
d G "DMA_IC1" 2 673 "0x010000" "or in direction and perif address"
d G "DMA_IN_IC1" 2 674 " (0x010000|getenv("sfr:IC1BUF"))"
d G "DMA_IC2" 2 675 "0x050000" "or in direction and perif address"
d G "DMA_IN_IC2" 2 676 " (0x050000|getenv("sfr:IC2BUF"))"
d G "DMA_IC3" 2 677 "0x250000" "or in direction and perif address"
d G "DMA_IN_IC3" 2 678 " (0x250000|getenv("sfr:IC3BUF"))"
d G "DMA_IC4" 2 679 "0x260000" "or in direction and perif address"
d G "DMA_IN_IC4" 2 680 " (0x260000|getenv("sfr:IC4BUF"))"
d G "DMA_OC1" 2 681 "0x020000" "or in direction and perif address"
d G "DMA_OC2" 2 682 "0x060000" "or in direction and perif address"
d G "DMA_OC3" 2 683 "0x190000" "or in direction and perif address"
d G "DMA_OC4" 2 684 "0x1A0000" "or in direction and perif address"
d G "DMA_TIMER2" 2 685 "0x070000" "or in direction and perif address"
d G "DMA_TIMER3" 2 686 "0x080000" "or in direction and perif address"
d G "DMA_TIMER4" 2 687 "0x1B0000" "or in direction and perif address"
d G "DMA_TIMER5" 2 688 "0x1C0000" "or in direction and perif address"
d G "DMA_IN" 2 689 "0x00"
d G "DMA_OUT" 2 690 "0x800000"
d G "DMA_BYTE" 2 692 "0x40"
d G "DMA_WORD" 2 693 "0x00" "default"
d G "DMA_HALF_INT" 2 694 "0x10" "interrupt when half full"
d G "DMA_WRITE_NULL" 2 695 "0x08"
d G "DMA_CONTINOUS" 2 697 "0x00"
d G "DMA_ONE_SHOT" 2 698 "0x01"
d G "DMA_PING_PONG" 2 699 "0x02"
d G "DMA_NO_INC" 2 700 "0x10"
d G "DMA_PERIF_ADDR" 2 701 "0x20" "Device supplies address"
d G "DMA_FORCE_NOW" 2 702 "0x100"
d G "DMA_IN_ERROR" 2 704 "0x01"
d G "DMA_OUT_ERROR" 2 705 "0x02"
d G "DMA_B_SELECT" 2 706 "0x04"
c L "dma_status" 2 3 3 "FUNCTION"
f N "abs" 2 712 ""
v L "x" 2 712 "sint8" `365 
f B "abs" 2 712 "sint8(sint8 x)" `364 
f N "abs" 2 713 ""
v L "x" 2 713 "sint16" `367 
f B "abs" 2 713 "sint16(sint16 x)" `366 
f N "abs" 2 714 ""
v L "x" 2 714 "sint32" `369 
f B "abs" 2 714 "sint32(sint32 x)" `368 
f N "abs" 2 715 ""
v L "x" 2 715 "float" `371 
f B "abs" 2 715 "float(float x)" `370 
f N "_mul" 2 716 ""
v L "??65535" 2 716 "int8" `373 
v L "??65535" 2 716 "int8" `374 
f B "_mul" 2 716 "int16(int8 ,int8 )" `372 
f N "_mul" 2 717 ""
v L "??65535" 2 717 "sint8" `376 
v L "??65535" 2 717 "sint8" `377 
f B "_mul" 2 717 "sint16(sint8 ,sint8 )" `375 
f N "_mul" 2 718 ""
v L "??65535" 2 718 "int16" `379 
v L "??65535" 2 718 "int16" `380 
f B "_mul" 2 718 "int32(int16 ,int16 )" `378 
f N "_mul" 2 719 ""
v L "??65535" 2 719 "sint16" `382 
v L "??65535" 2 719 "sint16" `383 
f B "_mul" 2 719 "sint32(sint16 ,sint16 )" `381 
f N "abs" 2 720 ""
v L "x" 2 720 "?" `385 
f B "abs" 2 720 "?(? x)" `384 
f N "abs" 2 721 ""
v L "x" 2 721 "?" `387 
f B "abs" 2 721 "?(? x)" `386 
f N "abs" 2 722 ""
v L "x" 2 722 "?" `389 
f B "abs" 2 722 "?(? x)" `388 
f N "abs" 2 723 ""
v L "x" 2 723 "?" `391 
f B "abs" 2 723 "?(? x)" `390 
f N "_mul" 2 724 ""
v L "??65535" 2 724 "int32" `393 
v L "??65535" 2 724 "int32" `394 
f B "_mul" 2 724 "?(int32 ,int32 )" `392 
f N "_mul" 2 725 ""
v L "??65535" 2 725 "sint32" `396 
v L "??65535" 2 725 "sint32" `397 
f B "_mul" 2 725 "?(sint32 ,sint32 )" `395 
f N "_mul" 2 726 ""
v L "??65535" 2 726 "?" `399 
v L "??65535" 2 726 "?" `400 
f B "_mul" 2 726 "?(? ,? )" `398 
f N "_mul" 2 727 ""
v L "??65535" 2 727 "?" `402 
v L "??65535" 2 727 "?" `403 
f B "_mul" 2 727 "?(? ,? )" `401  "Memory Manipulation Prototypes:"
f N "strcpy" 2 730 ""
v L "dest" 2 730 "*sint8" `405 
v L "src" 2 730 "*sint8" `406 
f B "strcpy" 2 730 "void(*sint8 dest,*sint8 src)" `404 
f N "memset" 2 731 ""
v L "destination" 2 731 "*int8" `408 
v L "value" 2 731 "int8" `409 
v L "num" 2 731 "int16" `410 
f B "memset" 2 731 "void(*int8 destination,int8 value,int16 num)" `407 
f N "memcpy" 2 732 ""
v L "destination" 2 732 "*int8" `412 
v L "source" 2 732 "*int8" `413 
v L "num" 2 732 "int16" `414 
f B "memcpy" 2 732 "void(*int8 destination,*int8 source,int16 num)" `411  "Data Manipulators Prototypes:"
f N "shift_left" 2 735 ""
v L "address" 2 735 "*int8" `416 
v L "bytes" 2 735 "int8" `417 
v L "value" 2 735 "int8" `418 
f B "shift_left" 2 735 "int8(*int8 address,int8 bytes,int8 value)" `415 
f N "shift_right" 2 736 ""
v L "address" 2 736 "*int8" `420 
v L "bytes" 2 736 "int8" `421 
v L "value" 2 736 "int8" `422 
f B "shift_right" 2 736 "int8(*int8 address,int8 bytes,int8 value)" `419 
f N "rotate_left" 2 737 ""
v L "address" 2 737 "*int8" `424 
v L "bytes" 2 737 "int8" `425 
f B "rotate_left" 2 737 "void(*int8 address,int8 bytes)" `423 
f N "rotate_right" 2 738 ""
v L "address" 2 738 "*int8" `427 
v L "bytes" 2 738 "int8" `428 
f B "rotate_right" 2 738 "void(*int8 address,int8 bytes)" `426 
f N "swap" 2 739 ""
v L "value" 2 739 "int8" `430 
f B "swap" 2 739 "void(int8 value)" `429 
f N "make8" 2 740 ""
v L "var" 2 740 "int16" `432 
v L "offset" 2 740 "int8" `433 
f B "make8" 2 740 "int8(int16 var,int8 offset)" `431 
f N "make8" 2 741 ""
v L "var" 2 741 "int32" `435 
v L "offset" 2 741 "int8" `436 
f B "make8" 2 741 "int8(int32 var,int8 offset)" `434 
f N "make16" 2 742 ""
v L "varhigh" 2 742 "int8" `438 
v L "varlow" 2 742 "int8" `439 
f B "make16" 2 742 "int16(int8 varhigh,int8 varlow)" `437 
f N "make32" 2 743 ""
v L "var1" 2 743 "int16" `441 
f B "make32" 2 743 "int32(int16 var1)" `440 
f N "make32" 2 744 ""
v L "var1" 2 744 "int16" `443 
v L "var2" 2 744 "int16" `444 
f B "make32" 2 744 "int32(int16 var1,int16 var2)" `442 
f N "make32" 2 745 ""
v L "var1" 2 745 "int16" `446 
v L "var2" 2 745 "int8" `447 
f B "make32" 2 745 "int32(int16 var1,int8 var2)" `445 
f N "make32" 2 746 ""
v L "var1" 2 746 "int16" `449 
v L "var2" 2 746 "int8" `450 
v L "var3" 2 746 "int8" `451 
f B "make32" 2 746 "int32(int16 var1,int8 var2,int8 var3)" `448 
f N "make32" 2 747 ""
v L "var1" 2 747 "int8" `453 
f B "make32" 2 747 "int32(int8 var1)" `452 
f N "make32" 2 748 ""
v L "var1" 2 748 "int8" `455 
v L "var2" 2 748 "int8" `456 
f B "make32" 2 748 "int32(int8 var1,int8 var2)" `454 
f N "make32" 2 749 ""
v L "var1" 2 749 "int8" `458 
v L "var2" 2 749 "int8" `459 
v L "var3" 2 749 "int8" `460 
f B "make32" 2 749 "int32(int8 var1,int8 var2,int8 var3)" `457 
f N "make32" 2 750 ""
v L "var1" 2 750 "int8" `462 
v L "var2" 2 750 "int8" `463 
v L "var3" 2 750 "int8" `464 
v L "var4" 2 750 "int8" `465 
f B "make32" 2 750 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `461 
f N "make32" 2 751 ""
v L "var1" 2 751 "int8" `467 
v L "var2" 2 751 "int16" `468 
f B "make32" 2 751 "int32(int8 var1,int16 var2)" `466 
f N "make32" 2 752 ""
v L "var1" 2 752 "int8" `470 
v L "var2" 2 752 "int16" `471 
v L "var3" 2 752 "int8" `472 
f B "make32" 2 752 "int32(int8 var1,int16 var2,int8 var3)" `469 
f N "make32" 2 753 ""
v L "var1" 2 753 "int8" `474 
v L "var2" 2 753 "int8" `475 
v L "var3" 2 753 "int16" `476 
f B "make32" 2 753 "int32(int8 var1,int8 var2,int16 var3)" `473 
f N "bit_set" 2 754 ""
v L "var" 2 754 "int8" `478 
v L "bit" 2 754 "int8" `479 
f B "bit_set" 2 754 "void(int8 var,int8 bit)" `477 
f N "bit_set" 2 755 ""
v L "var" 2 755 "int16" `481 
v L "bit" 2 755 "int8" `482 
f B "bit_set" 2 755 "void(int16 var,int8 bit)" `480 
f N "bit_set" 2 756 ""
v L "var" 2 756 "int32" `484 
v L "bit" 2 756 "int8" `485 
f B "bit_set" 2 756 "void(int32 var,int8 bit)" `483 
f N "bit_clear" 2 757 ""
v L "var" 2 757 "int8" `487 
v L "bit" 2 757 "int8" `488 
f B "bit_clear" 2 757 "void(int8 var,int8 bit)" `486 
f N "bit_clear" 2 758 ""
v L "var" 2 758 "int16" `490 
v L "bit" 2 758 "int8" `491 
f B "bit_clear" 2 758 "void(int16 var,int8 bit)" `489 
f N "bit_clear" 2 759 ""
v L "var" 2 759 "int32" `493 
v L "bit" 2 759 "int8" `494 
f B "bit_clear" 2 759 "void(int32 var,int8 bit)" `492 
f N "bit_test" 2 760 ""
v L "var" 2 760 "int8" `496 
v L "bit" 2 760 "int8" `497 
f B "bit_test" 2 760 "int8(int8 var,int8 bit)" `495 
f N "bit_test" 2 761 ""
v L "var" 2 761 "int16" `499 
v L "bit" 2 761 "int8" `500 
f B "bit_test" 2 761 "int8(int16 var,int8 bit)" `498 
f N "bit_test" 2 762 ""
v L "var" 2 762 "int32" `502 
v L "bit" 2 762 "int8" `503 
f B "bit_test" 2 762 "int8(int32 var,int8 bit)" `501 
f N "bit_set" 2 763 ""
v L "var" 2 763 "?" `505 
v L "bit" 2 763 "int8" `506 
f B "bit_set" 2 763 "void(? var,int8 bit)" `504 
f N "bit_set" 2 764 ""
v L "var" 2 764 "?" `508 
v L "bit" 2 764 "int8" `509 
f B "bit_set" 2 764 "void(? var,int8 bit)" `507 
f N "bit_clear" 2 765 ""
v L "var" 2 765 "?" `511 
v L "bit" 2 765 "int8" `512 
f B "bit_clear" 2 765 "void(? var,int8 bit)" `510 
f N "bit_clear" 2 766 ""
v L "var" 2 766 "?" `514 
v L "bit" 2 766 "int8" `515 
f B "bit_clear" 2 766 "void(? var,int8 bit)" `513 
f N "bit_test" 2 767 ""
v L "var" 2 767 "?" `517 
v L "bit" 2 767 "int8" `518 
f B "bit_test" 2 767 "int8(? var,int8 bit)" `516 
f N "bit_test" 2 768 ""
v L "var" 2 768 "?" `520 
v L "bit" 2 768 "int8" `521 
f B "bit_test" 2 768 "int8(? var,int8 bit)" `519 
f N "bit_first" 2 769 ""
v L "value" 2 769 "int8" `523 
v L "var" 2 769 "int16" `524 
f B "bit_first" 2 769 "int8(int8 value,int16 var)" `522 
f N "bit_last" 2 770 ""
v L "var" 2 770 "sint16" `526 
f B "bit_last" 2 770 "int8(sint16 var)" `525 
f N "bit_last" 2 771 ""
v L "value" 2 771 "int8" `528 
v L "var" 2 771 "sint16" `529 
f B "bit_last" 2 771 "int8(int8 value,sint16 var)" `527  "#use delay() Prototypes:"
f N "delay_cycles" 2 774 ""
v L "count" 2 774 "int16" `531 
f B "delay_cycles" 2 774 "void(int16 count)" `530 
f N "delay_ms" 2 775 ""
v L "time" 2 775 "int16" `533 
f B "delay_ms" 2 775 "void(int16 time)" `532 
f N "delay_us" 2 776 ""
v L "time" 2 776 "int16" `535 
f B "delay_us" 2 776 "void(int16 time)" `534  "#use rs232() Prototypes:"
f N "putchar" 2 779 ""
v L "cdata" 2 779 "sint8" `537 
f B "putchar" 2 779 "void(sint8 cdata)" `536 
f N "putchar" 2 780 ""
v L "cdata" 2 780 "sint8" `539 
v L "stream" 2 780 "int8" `540 
f B "putchar" 2 780 "void(sint8 cdata,int8 stream)" `538 
f N "puts" 2 781 ""
v L "string" 2 781 "*sint8" `542 
f B "puts" 2 781 "void(*sint8 string)" `541 
f N "puts" 2 782 ""
v L "string" 2 782 "*sint8" `544 
v L "stream" 2 782 "int8" `545 
f B "puts" 2 782 "void(*sint8 string,int8 stream)" `543 
f N "getch" 2 783 ""
f B "getch" 2 783 "sint8()" `546 
f N "getch" 2 784 ""
v L "stream" 2 784 "int8" `548 
f B "getch" 2 784 "sint8(int8 stream)" `547 
f N "gets" 2 785 ""
v L "string" 2 785 "*sint8" `550 
f B "gets" 2 785 "void(*sint8 string)" `549 
f N "gets" 2 786 ""
v L "string" 2 786 "*sint8" `552 
v L "stream" 2 786 "int8" `553 
f B "gets" 2 786 "void(*sint8 string,int8 stream)" `551 
f N "kbhit" 2 787 ""
f B "kbhit" 2 787 "int8()" `554 
f N "kbhit" 2 788 ""
v L "stream" 2 788 "int8" `556 
f B "kbhit" 2 788 "int8(int8 stream)" `555 
f N "printf" 2 789 ""
v L "string" 2 789 "*sint8" `558 
f B "printf" 2 789 "void(*sint8 string,*int8 _VA_LIST)" `557 
f N "fprintf" 2 790 ""
v L "stream" 2 790 "int8" `561 
v L "string" 2 790 "*sint8" `562 
f B "fprintf" 2 790 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `560 
f N "putc_send" 2 791 ""
f B "putc_send" 2 791 "void()" `564 
f N "fputc_send" 2 792 ""
v L "stream" 2 792 "int8" `566 
f B "fputc_send" 2 792 "void(int8 stream)" `565 
f N "rcv_buffer_full" 2 793 ""
f B "rcv_buffer_full" 2 793 "int8()" `567 
f N "rcv_buffer_full" 2 794 ""
v L "stream" 2 794 "int8" `569 
f B "rcv_buffer_full" 2 794 "int8(int8 stream)" `568 
f N "rcv_buffer_bytes" 2 795 ""
f B "rcv_buffer_bytes" 2 795 "int16()" `570 
f N "rcv_buffer_bytes" 2 796 ""
v L "stream" 2 796 "int8" `572 
f B "rcv_buffer_bytes" 2 796 "int16(int8 stream)" `571 
f N "tx_buffer_full" 2 797 ""
f B "tx_buffer_full" 2 797 "int8()" `573 
f N "tx_buffer_full" 2 798 ""
v L "stream" 2 798 "int8" `575 
f B "tx_buffer_full" 2 798 "int8(int8 stream)" `574 
f N "tx_buffer_bytes" 2 799 ""
f B "tx_buffer_bytes" 2 799 "int16()" `576 
f N "tx_buffer_bytes" 2 800 ""
v L "stream" 2 800 "int8" `578 
f B "tx_buffer_bytes" 2 800 "int16(int8 stream)" `577  "#use i2c() Prototypes:"
f N "i2c_read" 2 803 ""
f B "i2c_read" 2 803 "int8()" `579 
f N "i2c_read" 2 804 ""
v L "ack" 2 804 "int8" `581 
f B "i2c_read" 2 804 "int8(int8 ack)" `580 
f N "i2c_read" 2 805 ""
v L "stream" 2 805 "int8" `583 
v L "ack" 2 805 "int8" `584 
f B "i2c_read" 2 805 "int8(int8 stream,int8 ack)" `582 
f N "i2c_write" 2 806 ""
v L "data" 2 806 "int8" `586 
f B "i2c_write" 2 806 "int8(int8 data)" `585 
f N "i2c_write" 2 807 ""
v L "stream" 2 807 "int8" `588 
v L "data" 2 807 "int8" `589 
f B "i2c_write" 2 807 "int8(int8 stream,int8 data)" `587 
f N "i2c_start" 2 808 ""
f B "i2c_start" 2 808 "void()" `590 
f N "i2c_start" 2 809 ""
v L "stream" 2 809 "int8" `592 
f B "i2c_start" 2 809 "void(int8 stream)" `591 
f N "i2c_start" 2 810 ""
v L "stream" 2 810 "int8" `594 
v L "restart" 2 810 "int8" `595 
f B "i2c_start" 2 810 "void(int8 stream,int8 restart)" `593 
f N "i2c_stop" 2 811 ""
f B "i2c_stop" 2 811 "void()" `596 
f N "i2c_stop" 2 812 ""
v L "stream" 2 812 "int8" `598 
f B "i2c_stop" 2 812 "void(int8 stream)" `597 
f N "i2c_isr_state" 2 813 ""
f B "i2c_isr_state" 2 813 "sint8()" `599 
f N "i2c_slaveaddr" 2 814 ""
v L "addr" 2 814 "int8" `601 
f B "i2c_slaveaddr" 2 814 "void(int8 addr)" `600 
f N "i2c_slaveaddr" 2 815 ""
v L "stream" 2 815 "int8" `603 
v L "addr" 2 815 "int8" `604 
f B "i2c_slaveaddr" 2 815 "void(int8 stream,int8 addr)" `602 
f N "i2c_poll" 2 816 ""
f B "i2c_poll" 2 816 "int8()" `605 
f N "i2c_poll" 2 817 ""
v L "stream" 2 817 "int8" `607 
f B "i2c_poll" 2 817 "int8(int8 stream)" `606 
f N "i2c_init" 2 818 ""
v L "baud" 2 818 "int32" `609 
f B "i2c_init" 2 818 "void(int32 baud)" `608 
f N "i2c_init" 2 819 ""
v L "stream" 2 819 "int8" `611 
v L "baud" 2 819 "int32" `612 
f B "i2c_init" 2 819 "void(int8 stream,int32 baud)" `610  "#use spi() Prototypes:"
f N "spi_xfer" 2 822 ""
f B "spi_xfer" 2 822 "int8()" `613 
f N "spi_xfer" 2 823 ""
f G "spi_xfer" 2 823 "int16(int8 data)" `614 
f N "spi_xfer" 2 824 ""
f G "spi_xfer" 2 824 "int32(int8 data)" `614 
f N "spi_xfer" 2 825 ""
v L "data" 2 825 "int8" `615 
f B "spi_xfer" 2 825 "int8(int8 data)" `614 
f N "spi_xfer" 2 826 ""
v L "data" 2 826 "int16" `617 
f B "spi_xfer" 2 826 "int16(int16 data)" `616 
f N "spi_xfer" 2 827 ""
v L "data" 2 827 "int32" `619 
f B "spi_xfer" 2 827 "int32(int32 data)" `618 
f N "spi_xfer" 2 828 ""
v L "stream" 2 828 "int8" `621 
v L "data" 2 828 "int8" `622 
f B "spi_xfer" 2 828 "int8(int8 stream,int8 data)" `620 
f N "spi_xfer" 2 829 ""
v L "stream" 2 829 "int8" `624 
v L "data" 2 829 "int16" `625 
f B "spi_xfer" 2 829 "int16(int8 stream,int16 data)" `623 
f N "spi_xfer" 2 830 ""
v L "stream" 2 830 "int8" `627 
v L "data" 2 830 "int32" `628 
f B "spi_xfer" 2 830 "int32(int8 stream,int32 data)" `626 
f N "spi_xfer" 2 831 ""
v L "stream" 2 831 "int8" `630 
v L "data" 2 831 "int8" `631 
v L "bits" 2 831 "int8" `632 
f B "spi_xfer" 2 831 "int8(int8 stream,int8 data,int8 bits)" `629 
f N "spi_xfer" 2 832 ""
v L "stream" 2 832 "int8" `634 
v L "data" 2 832 "int16" `635 
v L "bits" 2 832 "int8" `636 
f B "spi_xfer" 2 832 "int16(int8 stream,int16 data,int8 bits)" `633 
f N "spi_xfer" 2 833 ""
v L "stream" 2 833 "int8" `638 
v L "data" 2 833 "int32" `639 
v L "bits" 2 833 "int8" `640 
f B "spi_xfer" 2 833 "int32(int8 stream,int32 data,int8 bits)" `637 
f N "spi_init" 2 834 ""
v L "baud" 2 834 "int32" `642 
f B "spi_init" 2 834 "void(int32 baud)" `641 
f N "spi_init" 2 835 ""
v L "stream" 2 835 "int8" `644 
v L "baud" 2 835 "int32" `645 
f B "spi_init" 2 835 "void(int8 stream,int32 baud)" `643 
f N "spi_speed" 2 836 ""
v L "baud" 2 836 "int32" `647 
f B "spi_speed" 2 836 "void(int32 baud)" `646 
f N "spi_speed" 2 837 ""
v L "stream" 2 837 "int8" `649 
v L "baud" 2 837 "int32" `650 
f B "spi_speed" 2 837 "void(int8 stream,int32 baud)" `648 
f N "spi_speed" 2 838 ""
v L "stream" 2 838 "int8" `652 
v L "baud" 2 838 "int32" `653 
v L "clock" 2 838 "int32" `654 
f B "spi_speed" 2 838 "void(int8 stream,int32 baud,int32 clock)" `651 
f N "spi_prewrite" 2 839 ""
v L "data" 2 839 "int8" `656 
f B "spi_prewrite" 2 839 "void(int8 data)" `655 
f N "spi_prewrite" 2 840 ""
v L "data" 2 840 "int16" `658 
f B "spi_prewrite" 2 840 "void(int16 data)" `657 
f N "spi_prewrite" 2 841 ""
v L "data" 2 841 "int32" `660 
f B "spi_prewrite" 2 841 "void(int32 data)" `659 
f N "spi_prewrite" 2 842 ""
v L "??65535" 2 842 "int8" `662 
v L "data" 2 842 "int8" `663 
f B "spi_prewrite" 2 842 "void(int8 ,int8 data)" `661 
f N "spi_prewrite" 2 843 ""
v L "??65535" 2 843 "int8" `665 
v L "data" 2 843 "int16" `666 
f B "spi_prewrite" 2 843 "void(int8 ,int16 data)" `664 
f N "spi_prewrite" 2 844 ""
v L "??65535" 2 844 "int8" `668 
v L "data" 2 844 "int32" `669 
f B "spi_prewrite" 2 844 "void(int8 ,int32 data)" `667 
f N "spi_xfer_in" 2 845 ""
f B "spi_xfer_in" 2 845 "int8()" `670 
f N "spi_xfer_in" 2 846 ""
f G "spi_xfer_in" 2 846 "int16(int8 bits)" `671 
f N "spi_xfer_in" 2 847 ""
f G "spi_xfer_in" 2 847 "int32(int8 bits)" `671 
f N "spi_xfer_in" 2 848 ""
v L "bits" 2 848 "int8" `672 
f B "spi_xfer_in" 2 848 "int8(int8 bits)" `671 
f N "spi_xfer_in" 2 849 ""
v L "bits" 2 849 "int8" `674 
f G "spi_xfer_in" 2 849 "int16(int8 bits,int8 bits)" `673 
f N "spi_xfer_in" 2 850 ""
v L "bits" 2 850 "int8" `674 
f G "spi_xfer_in" 2 850 "int32(int8 bits,int8 bits)" `673 
f N "spi_xfer_in" 2 851 ""
v L "stream" 2 851 "int8" `674 
v L "bits" 2 851 "int8" `675 
f B "spi_xfer_in" 2 851 "int8(int8 stream,int8 bits)" `673 
f N "spi_xfer_in" 2 852 ""
v L "stream" 2 852 "int8" `674 
v L "bits" 2 852 "int8" `678 
f G "spi_xfer_in" 2 852 "int16(int8 stream,int8 bits,int8 task)" `676 
f N "spi_xfer_in" 2 853 ""
v L "stream" 2 853 "int8" `674 
v L "bits" 2 853 "int8" `678 
f G "spi_xfer_in" 2 853 "int32(int8 stream,int8 bits,int8 task)" `676  "#use rtos() Prototypes:"
f N "rtos_run" 2 856 ""
f B "rtos_run" 2 856 "void(int8 stream,int8 bits,int8 task)" `676 
f N "rtos_yield" 2 857 ""
f B "rtos_yield" 2 857 "void(int8 bits,int8 task)" `677 
f N "rtos_enable" 2 858 ""
v L "task" 2 858 "int8" `679 
f B "rtos_enable" 2 858 "void(int8 task)" `678 
f N "rtos_disable" 2 859 ""
v L "task" 2 859 "int8" `681 
f B "rtos_disable" 2 859 "void(int8 task)" `680 
f N "rtos_terminate" 2 860 ""
f B "rtos_terminate" 2 860 "void()" `682 
f N "rtos_await" 2 861 ""
v L "flag" 2 861 "int8" `684 
f B "rtos_await" 2 861 "void(int8 flag)" `683 
f N "rtos_wait" 2 862 ""
v L "sem" 2 862 "int8" `686 
f B "rtos_wait" 2 862 "void(int8 sem)" `685 
f N "rtos_signal" 2 863 ""
v L "sem" 2 863 "int8" `688 
f B "rtos_signal" 2 863 "void(int8 sem)" `687 
f N "rtos_msg_send" 2 864 ""
v L "task" 2 864 "int8" `690 
v L "msg" 2 864 "int8" `691 
f B "rtos_msg_send" 2 864 "void(int8 task,int8 msg)" `689 
f N "rtos_msg_read" 2 865 ""
f B "rtos_msg_read" 2 865 "int8()" `692 
f N "rtos_msg_poll" 2 866 ""
f B "rtos_msg_poll" 2 866 "int8()" `693 
f N "rtos_overrun" 2 867 ""
v L "task" 2 867 "int8" `695 
f B "rtos_overrun" 2 867 "int8(int8 task)" `694 
f N "rtos_stats" 2 868 ""
v L "task" 2 868 "int8" `697 
v L "stat" 2 868 "*int8" `698 
f B "rtos_stats" 2 868 "void(int8 task,*int8 stat)" `696  "#use timer() Prototypes:"
f N "get_ticks" 2 871 ""
f B "get_ticks" 2 871 "int8()" `699 
f N "get_ticks" 2 872 ""
f G "get_ticks" 2 872 "int16(int8 stream)" `700 
f N "get_ticks" 2 873 ""
f G "get_ticks" 2 873 "int32(int8 stream)" `700 
f N "get_ticks" 2 874 ""
f G "get_ticks" 2 874 "?(int8 stream)" `700 
f N "get_ticks" 2 875 ""
v L "stream" 2 875 "int8" `701 
f B "get_ticks" 2 875 "int8(int8 stream)" `700 
f N "get_ticks" 2 876 ""
v L "stream" 2 876 "int8" `703 
f G "get_ticks" 2 876 "int16(int8 stream)" `702 
f N "get_ticks" 2 877 ""
v L "stream" 2 877 "int8" `703 
f G "get_ticks" 2 877 "int32(int8 stream)" `702 
f N "get_ticks" 2 878 ""
v L "stream" 2 878 "int8" `703 
f G "get_ticks" 2 878 "?(int8 stream)" `702 
f N "set_ticks" 2 879 ""
v L "value" 2 879 "int8" `703 
f B "set_ticks" 2 879 "void(int8 value)" `702 
f N "set_ticks" 2 880 ""
v L "value" 2 880 "int16" `705 
f B "set_ticks" 2 880 "void(int16 value)" `704 
f N "set_ticks" 2 881 ""
v L "value" 2 881 "int32" `707 
f B "set_ticks" 2 881 "void(int32 value)" `706 
f N "set_ticks" 2 882 ""
v L "value" 2 882 "?" `709 
f B "set_ticks" 2 882 "void(? value)" `708 
f N "set_ticks" 2 883 ""
v L "stream" 2 883 "int8" `711 
v L "value" 2 883 "int8" `712 
f B "set_ticks" 2 883 "void(int8 stream,int8 value)" `710 
f N "set_ticks" 2 884 ""
v L "stream" 2 884 "int8" `714 
v L "value" 2 884 "int16" `715 
f B "set_ticks" 2 884 "void(int8 stream,int16 value)" `713 
f N "set_ticks" 2 885 ""
v L "stream" 2 885 "int8" `717 
v L "value" 2 885 "int32" `718 
f B "set_ticks" 2 885 "void(int8 stream,int32 value)" `716 
f N "set_ticks" 2 886 ""
v L "stream" 2 886 "int8" `720 
v L "value" 2 886 "?" `721 
f B "set_ticks" 2 886 "void(int8 stream,? value)" `719  "#use pwm() Prototypes:"
f N "pwm_on" 2 889 ""
f B "pwm_on" 2 889 "void()" `722 
f N "pwm_on" 2 890 ""
v L "stream" 2 890 "int8" `724 
f B "pwm_on" 2 890 "void(int8 stream)" `723 
f N "pwm_off" 2 891 ""
f B "pwm_off" 2 891 "void()" `725 
f N "pwm_off" 2 892 ""
v L "stream" 2 892 "int8" `727 
f B "pwm_off" 2 892 "void(int8 stream)" `726 
f N "pwm_set_duty" 2 893 ""
v L "duty" 2 893 "int16" `729 
f B "pwm_set_duty" 2 893 "void(int16 duty)" `728 
f N "pwm_set_duty" 2 894 ""
v L "stream" 2 894 "int8" `731 
v L "duty" 2 894 "int16" `732 
f B "pwm_set_duty" 2 894 "void(int8 stream,int16 duty)" `730 
f N "pwm_set_duty_percent" 2 895 ""
v L "percent" 2 895 "int16" `734 
f B "pwm_set_duty_percent" 2 895 "void(int16 percent)" `733 
f N "pwm_set_duty_percent" 2 896 ""
v L "stream" 2 896 "int8" `736 
v L "percent" 2 896 "int16" `737 
f B "pwm_set_duty_percent" 2 896 "void(int8 stream,int16 percent)" `735 
f N "pwm_set_frequency" 2 897 ""
v L "frequency" 2 897 "int32" `739 
f B "pwm_set_frequency" 2 897 "void(int32 frequency)" `738 
f N "pwm_set_frequency" 2 898 ""
v L "stream" 2 898 "int8" `741 
v L "frequency" 2 898 "int32" `742 
f B "pwm_set_frequency" 2 898 "void(int8 stream,int32 frequency)" `740  "#use capture() Prototypes:"
f N "get_capture_time" 2 901 ""
f B "get_capture_time" 2 901 "int16()" `743 
f N "get_capture_time" 2 902 ""
v L "stream" 2 902 "int8" `745 
f B "get_capture_time" 2 902 "int16(int8 stream)" `744 
f N "get_capture_event" 2 903 ""
f B "get_capture_event" 2 903 "int8()" `746 
f N "get_capture_event" 2 904 ""
v L "stream" 2 904 "int8" `748 
f B "get_capture_event" 2 904 "int8(int8 stream)" `747  "Environment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 913 ""
v L "address" 2 913 "int32" `750 
f B "goto_address" 2 913 "void(int32 address)" `749 
f N "label_address" 2 914 ""
v L "label" 2 914 "int32" `752 
f B "label_address" 2 914 "int32(int32 label)" `751  "Program Memory Prototypes:"
f N "read_program_memory" 2 917 ""
v L "address" 2 917 "int32" `754 
v L "dataptr" 2 917 "*int8" `755 
v L "count" 2 917 "int16" `756 
f B "read_program_memory" 2 917 "void(int32 address,*int8 dataptr,int16 count)" `753 
f N "erase_program_memory" 2 918 ""
v L "address" 2 918 "int32" `758 
f B "erase_program_memory" 2 918 "void(int32 address)" `757 
f N "write_program_memory" 2 919 ""
v L "address" 2 919 "int32" `760 
v L "dataptr" 2 919 "*int8" `761 
v L "count" 2 919 "int16" `762 
f B "write_program_memory" 2 919 "void(int32 address,*int8 dataptr,int16 count)" `759 
f N "read_configuration_memory" 2 920 ""
v L "dataptr" 2 920 "*int8" `764 
v L "count" 2 920 "int8" `765 
f B "read_configuration_memory" 2 920 "void(*int8 dataptr,int8 count)" `763 
f N "write_configuration_memory" 2 921 ""
v L "dataptr" 2 921 "*int8" `767 
v L "count" 2 921 "int8" `768 
f B "write_configuration_memory" 2 921 "void(*int8 dataptr,int8 count)" `766  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 924 ""
v L "state" 2 924 "int8" `770 
f B "touchpad_state" 2 924 "void(int8 state)" `769 
f N "touchpad_getc" 2 925 ""
f B "touchpad_getc" 2 925 "sint8()" `771 
f N "touchpad_hit" 2 926 ""
f B "touchpad_hit" 2 926 "int8()" `772  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 932 ""
v L "interrupt" 2 932 "int16" `774 
f B "enable_interrupts" 2 932 "void(int16 interrupt)" `773 
f N "disable_interrupts" 2 933 ""
v L "interrupt" 2 933 "int16" `776 
f B "disable_interrupts" 2 933 "void(int16 interrupt)" `775 
f N "clear_interrupt" 2 934 ""
v L "interrupt" 2 934 "int16" `778 
f B "clear_interrupt" 2 934 "void(int16 interrupt)" `777 
f N "interrupt_active" 2 935 ""
v L "interrupt" 2 935 "int16" `780 
f B "interrupt_active" 2 935 "int8(int16 interrupt)" `779 
f N "interrupt_enabled" 2 936 ""
v L "interrupt" 2 936 "int16" `782 
f B "interrupt_enabled" 2 936 "int8(int16 interrupt)" `781 
f N "ext_int_edge" 2 937 ""
v L "source" 2 937 "int8" `784 
v L "edge" 2 937 "int8" `785 
f B "ext_int_edge" 2 937 "void(int8 source,int8 edge)" `783 
f N "jump_to_isr" 2 938 ""
v L "address" 2 938 "int16" `787 
f B "jump_to_isr" 2 938 "void(int16 address)" `786  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 940 "0x40"
d G "H_TO_L" 2 941 "0"
d G "INTR_GLOBAL" 2 945 "0x0800"
d G "GLOBAL" 2 946 "0x0800" "For compatibility with PIC16/18"
d G "INTR_LEVEL0" 2 947 "0x3000"
d G "INTR_LEVEL1" 2 948 "0x3001"
d G "INTR_LEVEL2" 2 949 "0x3002"
d G "INTR_LEVEL3" 2 950 "0x3003"
d G "INTR_LEVEL4" 2 951 "0x3004"
d G "INTR_LEVEL5" 2 952 "0x3005"
d G "INTR_LEVEL6" 2 953 "0x3006"
d G "INTR_LEVEL7" 2 954 "0x3007"
d G "INTR_CN_PIN" 2 968 "0x8000" "or in a PIN_xx constant (enable/disable only)"
d G "INT_STACKERR" 2 970 "3"
d G "INT_MATHERR" 2 971 "4"
d G "INT_DMAERR" 2 972 "5"
d G "INT_EXT0" 2 973 "6"
d G "INT_IC1" 2 974 "7"
d G "INT_OC1" 2 975 "8"
d G "INT_TIMER1" 2 976 "9"
d G "INT_DMA0" 2 977 "69"
d G "INT_IC2" 2 978 "70"
d G "INT_OC2" 2 979 "71"
d G "INT_TIMER2" 2 980 "72"
d G "INT_TIMER3" 2 981 "73"
d G "INT_SPI1E" 2 982 "74"
d G "INT_SPI1" 2 983 "75"
d G "INT_RDA" 2 984 "76"
d G "INT_TBE" 2 985 "77"
d G "INT_ADC1" 2 986 "78"
d G "INT_DMA1" 2 987 "79"
d G "INT_SI2C" 2 988 "81"
d G "INT_MI2C" 2 989 "82"
d G "INT_CNI" 2 990 "84"
d G "INT_EXT1" 2 991 "85"
d G "INT_DMA2" 2 992 "89"
d G "INT_OC3" 2 993 "90"
d G "INT_OC4" 2 994 "91"
d G "INT_TIMER4" 2 995 "92"
d G "INT_TIMER5" 2 996 "93"
d G "INT_EXT2" 2 997 "94"
d G "INT_RDA2" 2 998 "95"
d G "INT_TBE2" 2 999 "96"
d G "INT_SPI2E" 2 1000 "97"
d G "INT_SPI2" 2 1001 "98"
d G "INT_DMA3" 2 1002 "101"
d G "INT_IC3" 2 1003 "102"
d G "INT_IC4" 2 1004 "103"
d G "INT_SI2C2" 2 1005 "114"
d G "INT_MI2C2" 2 1006 "115"
d G "INT_UART1E" 2 1007 "130"
d G "INT_UART2E" 2 1008 "131"
d G "INT_COMP" 2 1009 "152"
d G "INT_CRC" 2 1010 "174"
d G "INT_CTMU" 2 1011 "176"
d G "INT_SOFTWARE" 2 1012 "193"
d G "INT_GENERIC" 2 1013 "217"
d G "INT_OSCFAIL" 2 1014 "218"
d G "INT_ADDRERR" 2 1015 "219"
d G "INT_PTGWDT" 2 1016 "221"
d G "INT_PTG0" 2 1017 "222"
d G "INT_PTG1" 2 1018 "223"
d G "INT_PTG2" 2 1019 "224"
d G "INT_PTG3" 2 1020 "225"
D G "DELAY" 1 10 "0"
D G "SAMPLES" 1 11 "38" "Multiplied by 3 if split"
D G "SCK" 1 12 "PIN_B7"
D G "SDO" 1 13 "PIN_B8"
D G "SDI" 1 14 "PIN_B9"
D G "CS" 1 15 "PIN_B6"
D G "TOGGLE" 1 16 "PIN_A0"
C L "jump_to_isr" 1 21 1 "FUNCTION"
V G "Table" 1 22 "[38]" `795 
F N "FakeSpiWrite24" 0 3 ""
V L "value" 0 3 "sint32" `798 
F G "FakeSpiWrite24" 0 4 "void(sint32 value)" `797 
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
C L "FakeSpiWrite24" 0 7 1 "FUNCTION"
F N "MAIN" 0 151 ""
F G "MAIN" 0 152 "void()" `799 
V L "i" 0 155 "int8" `802 
C L "MAIN" 0 7 8 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "read_extended_ram" 4 0
F B "write_extended_ram" 4 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 4
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_k" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_k" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_k" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_k" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_k" 0 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_pullup" 1 2
F B "set_pulldown" 1 2
F B "pin_select" 2 4
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "pll_locked" 0 0
F B "setup_comparator" 2 0
F B "setup_comparator_filter" 2 0
F B "setup_comparator_mask" 2 5
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "get_capture32" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "set_pwm_period" 2 0
F B "setup_vref" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc32" 1 3
F B "crc_calc16" 1 3
F B "crc_calc8" 1 3
F B "crc_calc" 1 3
F B "setup_dma" 3 0
F B "dma_start" 3 5
F B "dma_status" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
