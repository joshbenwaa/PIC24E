CCS PCD C Compiler, Version 5.071d, 1               10-Aug-17 11:44
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\joshb\OneDrive - St. Cloud State University\PIC24E\DAC\DAC.lst

               ROM used:   1222 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   131 (0%) at main() level
                           139 (0%) worst case
               Stack used: 42 locations (2 in main + 40 for interrupts)
               Stack size: 128

*
00000:  GOTO    3E4
*
0001C:  DATA    60,03,00
*
00028:  DATA    80,03,00
.................... #include <DAC.h>  
.................... #include <24EP256GP202.h> 
.................... //////////// Standard Header file for the PIC24EP256GP202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24EP256GP202 
*
00200:  CLR     54
00202:  MOV     #C8,W3
00204:  SUB     W0,W3,W3
00206:  BRA     C,212
00208:  MOV     #21C,W3
0020A:  ADD     W3,W0,W0
0020C:  TBLRDL.B[W0],W0L
0020E:  CLR.B   1
00210:  RETURN  
00212:  MOV     #21C,W0
00214:  ADD     W3,W3,W3
00216:  ADD     W3,W0,W3
00218:  TBLRDH  [W3],W0
0021A:  RETURN  
0021C:  DATA    80,80,ED
0021E:  DATA    00,20,20
00220:  DATA    88,09,0F
00222:  DATA    20,90,D5
00224:  DATA    0A,20,20
00226:  DATA    97,FC,0C
00228:  DATA    20,9F,2F
0022A:  DATA    D4,20,20
0022C:  DATA    A7,8D,08
0022E:  DATA    20,AF,FD
00230:  DATA    1E,20,20
00232:  DATA    B6,7F,06
00234:  DATA    20,BD,44
00236:  DATA    A9,20,20
00238:  DATA    C4,95,04
0023A:  DATA    20,CB,05
0023C:  DATA    3C,20,20
0023E:  DATA    D1,96,02
00240:  DATA    20,D7,44
00242:  DATA    9E,20,20
00244:  DATA    DD,4E,01
00246:  DATA    20,E2,02
00248:  DATA    9F,20,20
0024A:  DATA    E7,8D,00
0024C:  DATA    20,EC,41
0024E:  DATA    12,20,20
00250:  DATA    F0,2A,00
00252:  DATA    20,F3,00
00254:  DATA    D0,20,20
00256:  DATA    F7,02,00
00258:  DATA    20,F9,41
0025A:  DATA    BB,20,20
0025C:  DATA    FB,FA,01
0025E:  DATA    20,FD,02
00260:  DATA    BB,20,20
00262:  DATA    FE,FD,02
00264:  DATA    20,FF,44
00266:  DATA    BE,20,20
00268:  DATA    FF,FF,04
0026A:  DATA    20,FF,05
0026C:  DATA    BE,20,20
0026E:  DATA    FE,FD,06
00270:  DATA    20,FD,44
00272:  DATA    BB,20,20
00274:  DATA    FB,FA,08
00276:  DATA    20,F9,FD
00278:  DATA    BB,20,20
0027A:  DATA    F7,02,0C
0027C:  DATA    20,F3,2F
0027E:  DATA    D0,20,20
00280:  DATA    F0,2A,0F
00282:  DATA    20,EC,D5
00284:  DATA    12,20,20
00286:  DATA    E7,8D,13
00288:  DATA    20,E2,ED
0028A:  DATA    9F,20,20
0028C:  DATA    DD,4E,18
0028E:  DATA    20,D7,72
00290:  DATA    9E,20,20
00292:  DATA    D1,96,1D
00294:  DATA    20,CB,60
00296:  DATA    3C,20,20
00298:  DATA    C4,95,22
0029A:  DATA    20,BD,B1
0029C:  DATA    A9,20,20
0029E:  DATA    B6,7F,28
002A0:  DATA    20,AF,61
002A2:  DATA    1E,20,20
002A4:  DATA    A7,8D,2E
002A6:  DATA    20,9F,69
002A8:  DATA    D4,20,20
002AA:  DATA    97,FC,34
002AC:  DATA    20,90,C3
002AE:  DATA    0A,20,20
002B0:  DATA    88,09,3B
002B2:  DATA    20,80,6A
002B4:  DATA    00,20,20
002B6:  DATA    77,F6,42
002B8:  DATA    20,6F,56
002BA:  DATA    F5,20,20
002BC:  DATA    68,03,49
002BE:  DATA    20,60,80
002C0:  DATA    2B,20,20
002C2:  DATA    58,72,50
002C4:  DATA    20,50,E1
002C6:  DATA    E1,20,20
002C8:  DATA    49,80,58
002CA:  DATA    20,42,72
002CC:  DATA    56,20,20
002CE:  DATA    3B,6A,60
002D0:  DATA    20,34,2B
002D2:  DATA    C3,20,20
002D4:  DATA    2E,69,68
002D6:  DATA    20,28,03
002D8:  DATA    61,20,20
002DA:  DATA    22,B1,6F
002DC:  DATA    20,1D,F5
002DE:  DATA    60,20,20
002E0:  DATA    18,72,77
002E2:  DATA    20,13,F6
002E4:  CLR     54
002E6:  MOV     #2F0,W3
002E8:  ADD     W3,W0,W0
002EA:  TBLRDL.B[W0],W0L
002EC:  CLR.B   1
002EE:  RETURN  
002F0:  DATA    54,52,00
002F2:  DATA    41,4E,00
002F4:  DATA    53,46,00
002F6:  DATA    45,52,00
002F8:  DATA    20,43,00
002FA:  DATA    4F,4D,00
002FC:  DATA    50,4C,00
002FE:  DATA    45,54,00
00300:  DATA    45,0A,00
00302:  DATA    0D,00,00
00304:  CLR     54
00306:  MOV     #310,W3
00308:  ADD     W3,W0,W0
0030A:  TBLRDL.B[W0],W0L
0030C:  CLR.B   1
0030E:  RETURN  
00310:  DATA    53,74,00
00312:  DATA    61,72,00
00314:  DATA    74,65,00
00316:  DATA    64,20,00
00318:  DATA    53,74,00
0031A:  DATA    61,72,00
0031C:  DATA    74,65,00
0031E:  DATA    64,20,00
00320:  DATA    53,74,00
00322:  DATA    61,72,00
00324:  DATA    74,65,00
00326:  DATA    64,0A,00
00328:  DATA    0D,00,00
0032A:  CLR     54
0032C:  MOV     #336,W3
0032E:  ADD     W3,W0,W0
00330:  TBLRDL.B[W0],W0L
00332:  CLR.B   1
00334:  RETURN  
00336:  DATA    70,72,00
00338:  DATA    65,73,00
0033A:  DATA    73,20,00
0033C:  DATA    61,6E,00
0033E:  DATA    79,20,00
00340:  DATA    6B,65,00
00342:  DATA    79,20,00
00344:  DATA    74,6F,00
00346:  DATA    20,69,00
00348:  DATA    6E,69,00
0034A:  DATA    74,69,00
0034C:  DATA    61,74,00
0034E:  DATA    65,20,00
00350:  DATA    53,50,00
00352:  DATA    49,20,00
00354:  DATA    74,72,00
00356:  DATA    61,6E,00
00358:  DATA    73,66,00
0035A:  DATA    65,72,00
0035C:  DATA    0A,0D,00
0035E:  DATA    00,00,00
....................  
.................... #list 
....................  
.................... #device ICSP=1 
.................... #use delay(internal=140000000) 
....................  
.................... #FUSES HS, NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOJTAG                   //JTAG disabled 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
....................  
.................... #use FAST_IO(B) 
.................... #define DELAY 1 
.................... #define SAMPLES 100*3      //Multiplied by 3 
.................... #define SCK   PIN_B7 
.................... #define SDO   PIN_B8 
.................... #define SDI   PIN_B9 
.................... #define CS    PIN_B6 
.................... #define TOGGLE PIN_A0 
.................... #pin_select U1TX=PIN_B11 
.................... #pin_select U1RX=PIN_B12 
.................... #use rs232(UART1, baud=115200, stream=UART_PORT1) 
....................  
.................... //#use spi(FORCE_HW, MASTER, SPI1, MODE=1, stream=SPI_PORT1, BAUD = 14000000) 
.................... const unsigned int8 Table[SAMPLES] = 
.................... {0x80, 0x80, 0x00, 
.................... 0x20, 0x88, 0x09, 
.................... 0x20, 0x90, 0x0a, 
.................... 0x20, 0x97, 0xfc, 
.................... 0x20, 0x9f, 0xd4, 
.................... 0x20, 0xa7, 0x8d, 
.................... 0x20, 0xaf, 0x1e, 
.................... 0x20, 0xb6, 0x7f, 
.................... 0x20, 0xbd, 0xa9, 
.................... 0x20, 0xc4, 0x95, 
.................... 0x20, 0xcb, 0x3c, 
.................... 0x20, 0xd1, 0x96, 
.................... 0x20, 0xd7, 0x9e, 
.................... 0x20, 0xdd, 0x4e, 
.................... 0x20, 0xe2, 0x9f, 
.................... 0x20, 0xe7, 0x8d, 
.................... 0x20, 0xec, 0x12, 
.................... 0x20, 0xf0, 0x2a, 
.................... 0x20, 0xf3, 0xd0, 
.................... 0x20, 0xf7, 0x02, 
.................... 0x20, 0xf9, 0xbb, 
.................... 0x20, 0xfb, 0xfa, 
.................... 0x20, 0xfd, 0xbb, 
.................... 0x20, 0xfe, 0xfd, 
.................... 0x20, 0xff, 0xbe, 
.................... 0x20, 0xff, 0xff, 
.................... 0x20, 0xff, 0xbe, 
.................... 0x20, 0xfe, 0xfd, 
.................... 0x20, 0xfd, 0xbb, 
.................... 0x20, 0xfb, 0xfa, 
.................... 0x20, 0xf9, 0xbb, 
.................... 0x20, 0xf7, 0x02, 
.................... 0x20, 0xf3, 0xd0, 
.................... 0x20, 0xf0, 0x2a, 
.................... 0x20, 0xec, 0x12, 
.................... 0x20, 0xe7, 0x8d, 
.................... 0x20, 0xe2, 0x9f, 
.................... 0x20, 0xdd, 0x4e, 
.................... 0x20, 0xd7, 0x9e, 
.................... 0x20, 0xd1, 0x96, 
.................... 0x20, 0xcb, 0x3c, 
.................... 0x20, 0xc4, 0x95, 
.................... 0x20, 0xbd, 0xa9, 
.................... 0x20, 0xb6, 0x7f, 
.................... 0x20, 0xaf, 0x1e, 
.................... 0x20, 0xa7, 0x8d, 
.................... 0x20, 0x9f, 0xd4, 
.................... 0x20, 0x97, 0xfc, 
.................... 0x20, 0x90, 0x0a, 
.................... 0x20, 0x88, 0x09, 
.................... 0x20, 0x80, 0x00, 
.................... 0x20, 0x77, 0xf6, 
.................... 0x20, 0x6f, 0xf5, 
.................... 0x20, 0x68, 0x03, 
.................... 0x20, 0x60, 0x2b, 
.................... 0x20, 0x58, 0x72, 
.................... 0x20, 0x50, 0xe1, 
.................... 0x20, 0x49, 0x80, 
.................... 0x20, 0x42, 0x56, 
.................... 0x20, 0x3b, 0x6a, 
.................... 0x20, 0x34, 0xc3, 
.................... 0x20, 0x2e, 0x69, 
.................... 0x20, 0x28, 0x61, 
.................... 0x20, 0x22, 0xb1, 
.................... 0x20, 0x1d, 0x60, 
.................... 0x20, 0x18, 0x72, 
.................... 0x20, 0x13, 0xed, 
.................... 0x20, 0x0f, 0xd5, 
.................... 0x20, 0x0c, 0x2f, 
.................... 0x20, 0x08, 0xfd, 
.................... 0x20, 0x06, 0x44, 
.................... 0x20, 0x04, 0x05, 
.................... 0x20, 0x02, 0x44, 
.................... 0x20, 0x01, 0x02, 
.................... 0x20, 0x00, 0x41, 
.................... 0x20, 0x00, 0x00, 
.................... 0x20, 0x00, 0x41, 
.................... 0x20, 0x01, 0x02, 
.................... 0x20, 0x02, 0x44, 
.................... 0x20, 0x04, 0x05, 
.................... 0x20, 0x06, 0x44, 
.................... 0x20, 0x08, 0xfd, 
.................... 0x20, 0x0c, 0x2f, 
.................... 0x20, 0x0f, 0xd5, 
.................... 0x20, 0x13, 0xed, 
.................... 0x20, 0x18, 0x72, 
.................... 0x20, 0x1d, 0x60, 
.................... 0x20, 0x22, 0xb1, 
.................... 0x20, 0x28, 0x61, 
.................... 0x20, 0x2e, 0x69, 
.................... 0x20, 0x34, 0xc3, 
.................... 0x20, 0x3b, 0x6a, 
.................... 0x20, 0x42, 0x56, 
.................... 0x20, 0x49, 0x80, 
.................... 0x20, 0x50, 0xe1, 
.................... 0x20, 0x58, 0x72, 
.................... 0x20, 0x60, 0x2b, 
.................... 0x20, 0x68, 0x03, 
.................... 0x20, 0x6f, 0xf5, 
.................... 0x20, 0x77, 0xf6 
.................... }; 
....................  
....................  
.................... #INT_DMA0 
.................... void  dma0_isr(void)  
00360:  PUSH    42
00362:  PUSH    36
00364:  PUSH    54
00366:  MOV     W0,[W15++]
00368:  MOV     #2,W0
0036A:  REPEAT  #C
0036C:  MOV     [W0++],[W15++]
.................... { 
....................  
.................... } 
....................  
0036E:  BCLR.B  800.4
00370:  MOV     #1A,W0
00372:  REPEAT  #C
00374:  MOV     [--W15],[W0--]
00376:  MOV     [--W15],W0
00378:  POP     54
0037A:  POP     36
0037C:  POP     42
0037E:  RETFIE  
.................... #INT_SPI1 
.................... void  spi1_isr(void)  
00380:  PUSH    42
00382:  PUSH    36
00384:  PUSH    54
00386:  MOV     W0,[W15++]
00388:  MOV     #2,W0
0038A:  REPEAT  #C
0038C:  MOV     [W0++],[W15++]
.................... { 
....................       printf("TRANSFER COMPLETE\n\r"); 
0038E:  MOV     #0,W1
00390:  MOV     W1,W0
00392:  CLR.B   1
00394:  CALL    2E4
00398:  INC     W1,W1
0039A:  BTSC.B  223.1
0039C:  BRA     39A
0039E:  MOV     W0,224
003A0:  MOV     #12,W0
003A2:  CPSGT   W1,W0
003A4:  BRA     390
003A6:  BCLR.B  801.2
003A8:  MOV     #1A,W0
003AA:  REPEAT  #C
003AC:  MOV     [--W15],[W0--]
003AE:  MOV     [--W15],W0
003B0:  POP     54
003B2:  POP     36
003B4:  POP     42
003B6:  RETFIE  
.................... } 
....................  
.................... void FakeSpiWrite(int8 value) 
.................... { 
....................    for(int j = 7; j >= 0; j--) 
003B8:  MOV     #7,W4
003BA:  MOV     W4,100A
003BC:  MOV     100A,W4
003BE:  CP      W4,#0
003C0:  BRA     LT,3E0
....................    { 
....................       output_low(SCK); 
003C2:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, j)); 
003C4:  MOV.B   1008,W0L
003C6:  MOV.B   W0L,2
003C8:  MOV.B   100A,W0L
003CA:  BTST.C  W1.W0
003CC:  BRA     C,3D2
003CE:  BCLR.B  E15.0
003D0:  BRA     3D4
003D2:  BSET.B  E15.0
....................       delay_cycles(DELAY); 
003D4:  NOP     
....................       output_high(SCK); 
003D6:  BSET.B  E14.7
....................       delay_cycles(DELAY); 
003D8:  NOP     
003DA:  DEC     100A
003DC:  GOTO    3BC
....................    } 
....................    output_low(SCK); 
003E0:  BCLR.B  E14.7
003E2:  RETURN  
.................... } 
....................  
.................... void main() 
003E4:  MOV     #7F80,W15
003E6:  MOV     #7FFF,W0
003E8:  MOV     W0,20
003EA:  NOP     
003EC:  BSET.B  8C1.7
003EE:  DISI    #6
003F0:  MOV     #742,W1
003F2:  MOV     #46,W2
003F4:  MOV     #57,W3
003F6:  MOV.B   W2L,[W1]
003F8:  MOV.B   W3L,[W1]
003FA:  BCLR.B  742.6
003FC:  MOV     #2C,W0
003FE:  MOV     W0,6C4
00400:  MOV     #100,W0
00402:  MOV     W0,688
00404:  DISI    #6
00406:  MOV     #742,W1
00408:  MOV     #46,W2
0040A:  MOV     #57,W3
0040C:  MOV.B   W2L,[W1]
0040E:  MOV.B   W3L,[W1]
00410:  BSET.B  742.6
00412:  MOV     #7,W4
00414:  MOV     W4,744
00416:  MOV     #153,W4
00418:  MOV     W4,746
0041A:  CLR     748
0041C:  MOV     #8000,W4
0041E:  MOV     W4,220
00420:  MOV     #400,W4
00422:  MOV     W4,222
00424:  BCLR.B  220.3
00426:  MOV     #25,W4
00428:  MOV     W4,228
0042A:  CLR     E0E
0042C:  CLR     E1E
.................... { 
....................    set_tris_b(0); 
0042E:  CLR     E10
....................    output_low(CS); 
00430:  BCLR.B  E14.6
....................     unsigned int16 i = 0; 
00432:  CLR     1002
....................    printf("Started Started Started\n\r"); 
00434:  MOV     #0,W1
00436:  MOV     W1,W0
00438:  CLR.B   1
0043A:  CALL    304
0043E:  INC     W1,W1
00440:  BTSC.B  223.1
00442:  BRA     440
00444:  MOV     W0,224
00446:  MOV     #18,W0
00448:  CPSGT   W1,W0
0044A:  BRA     436
.................... printf("press any key to initiate SPI transfer\n\r"); 
0044C:  MOV     #0,W1
0044E:  MOV     W1,W0
00450:  CLR.B   1
00452:  CALL    32A
00456:  INC     W1,W1
00458:  BTSC.B  223.1
0045A:  BRA     458
0045C:  MOV     W0,224
0045E:  MOV     #27,W0
00460:  CPSGT   W1,W0
00462:  BRA     44E
....................       getc(); 
00464:  BTSS.B  222.0
00466:  BRA     464
00468:  MOV     226,W0
....................    while(TRUE) 
....................    { 
....................       while(i < SAMPLES) 
0046A:  MOV     1002,W4
0046C:  MOV     #12C,W3
0046E:  CP      W3,W4
00470:  BRA     LEU,4BE
....................       { 
....................                  output_low(CS); 
00472:  BCLR.B  E14.6
....................                   FakeSpiWrite(Table[i]); 
00474:  MOV     1002,W0
00476:  CALL    200
0047A:  MOV.B   W0L,W5L
0047C:  PUSH    1008
0047E:  MOV.B   W5L,[W15-#2]
00480:  POP     1008
00482:  CALL    3B8
....................                   FakeSpiWrite(Table[i+1]); 
00486:  MOV     1002,W4
00488:  ADD     W4,#1,W5
0048A:  MOV     W5,W0
0048C:  CALL    200
00490:  MOV.B   W0L,W6L
00492:  PUSH    1008
00494:  MOV.B   W6L,[W15-#2]
00496:  POP     1008
00498:  CALL    3B8
....................                   FakeSpiWrite(Table[i+2]); 
0049C:  MOV     1002,W4
0049E:  ADD     W4,#2,W5
004A0:  MOV     W5,W0
004A2:  CALL    200
004A6:  MOV.B   W0L,W6L
004A8:  PUSH    1008
004AA:  MOV.B   W6L,[W15-#2]
004AC:  POP     1008
004AE:  CALL    3B8
....................                    output_high(CS); 
004B2:  BSET.B  E14.6
....................          i += 3; 
004B4:  MOV     1002,W4
004B6:  ADD     W4,#3,W0
004B8:  MOV     W0,1002
004BA:  GOTO    46A
....................       } 
....................       i = 0; 
004BE:  CLR     1002
004C0:  GOTO    46A
....................    } 
....................  
.................... } 
*
004C4:  PWRSAV  #0

Configuration Fuses:
   Word  3L: FFCF   ICSP1 NOJTAG NODEBUG
          H: 0000  
   Word  4L: FFFF   NOALTI2C1 NOALTI2C2 WDTWIN_25%
          H: 0000  
   Word  5L: FF7F   WPOSTS16 WPRES128 PLLWAIT WINDIS NOWDT
          H: 0000  
   Word  6L: FF3A   HS OSCIO IOL1WAY CKSFSM
          H: 0000  
   Word  7L: FFF9   FRC_PLL IESO
          H: 0000  
   Word  8L: FFFF   NOWRT NOPROTECT
          H: 0000  
   Word  9L: FFFF  
          H: 0000  
   Word 10L: FFFF  
          H: 0000  
