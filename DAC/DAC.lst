CCS PCD C Compiler, Version 5.071d, 1               08-Aug-17 16:44
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\joshb\OneDrive - St. Cloud State University\PIC24E\DAC\DAC.lst

               ROM used:   1128 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   131 (0%) at main() level
                           131 (0%) worst case
               Stack used: 42 locations (2 in main + 40 for interrupts)
               Stack size: 128

*
00000:  GOTO    354
*
0001C:  DATA    FC,02,00
*
00028:  DATA    1C,03,00
.................... #include <DAC.h> 
.................... #include <24EP256GP202.h> 
.................... //////////// Standard Header file for the PIC24EP256GP202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24EP256GP202 
*
00200:  CLR     54
00202:  MOV     #64,W3
00204:  SUB     W0,W3,W3
00206:  BRA     C,212
00208:  MOV     #21C,W3
0020A:  ADD     W3,W0,W0
0020C:  TBLRDL.B[W0],W0L
0020E:  CLR.B   1
00210:  RETURN  
00212:  MOV     #21C,W0
00214:  ADD     W3,W3,W3
00216:  ADD     W3,W0,W3
00218:  TBLRDH  [W3],W0
0021A:  RETURN  
0021C:  DATA    80,80,13
0021E:  DATA    00,20,ED
00220:  DATA    90,0A,20
00222:  DATA    20,9F,0C
00224:  DATA    D4,20,2F
00226:  DATA    AF,1E,20
00228:  DATA    20,BD,06
0022A:  DATA    A9,20,44
0022C:  DATA    CB,3C,20
0022E:  DATA    20,D7,02
00230:  DATA    9E,20,44
00232:  DATA    E2,9F,20
00234:  DATA    20,EC,00
00236:  DATA    12,20,41
00238:  DATA    F3,D0,20
0023A:  DATA    20,F9,00
0023C:  DATA    BB,20,41
0023E:  DATA    FD,BB,20
00240:  DATA    20,FF,02
00242:  DATA    BE,20,44
00244:  DATA    FF,BE,20
00246:  DATA    20,FD,06
00248:  DATA    BB,20,44
0024A:  DATA    F9,BB,20
0024C:  DATA    20,F3,0C
0024E:  DATA    D0,20,2F
00250:  DATA    EC,12,20
00252:  DATA    20,E2,13
00254:  DATA    9F,20,ED
00256:  DATA    D7,9E,20
00258:  DATA    20,CB,1D
0025A:  DATA    3C,20,60
0025C:  DATA    BD,A9,20
0025E:  DATA    20,AF,28
00260:  DATA    1E,20,61
00262:  DATA    9F,D4,20
00264:  DATA    20,90,34
00266:  DATA    0A,20,C3
00268:  DATA    80,00,20
0026A:  DATA    20,6F,42
0026C:  DATA    F5,20,56
0026E:  DATA    60,2B,20
00270:  DATA    20,50,50
00272:  DATA    E1,20,E1
00274:  DATA    42,56,20
00276:  DATA    20,34,60
00278:  DATA    C3,20,2B
0027A:  DATA    28,61,20
0027C:  DATA    20,1D,6F
0027E:  DATA    60,20,F5
00280:  CLR     54
00282:  MOV     #28C,W3
00284:  ADD     W3,W0,W0
00286:  TBLRDL.B[W0],W0L
00288:  CLR.B   1
0028A:  RETURN  
0028C:  DATA    54,52,00
0028E:  DATA    41,4E,00
00290:  DATA    53,46,00
00292:  DATA    45,52,00
00294:  DATA    20,43,00
00296:  DATA    4F,4D,00
00298:  DATA    50,4C,00
0029A:  DATA    45,54,00
0029C:  DATA    45,0A,00
0029E:  DATA    0D,00,00
002A0:  CLR     54
002A2:  MOV     #2AC,W3
002A4:  ADD     W3,W0,W0
002A6:  TBLRDL.B[W0],W0L
002A8:  CLR.B   1
002AA:  RETURN  
002AC:  DATA    53,74,00
002AE:  DATA    61,72,00
002B0:  DATA    74,65,00
002B2:  DATA    64,20,00
002B4:  DATA    53,74,00
002B6:  DATA    61,72,00
002B8:  DATA    74,65,00
002BA:  DATA    64,20,00
002BC:  DATA    53,74,00
002BE:  DATA    61,72,00
002C0:  DATA    74,65,00
002C2:  DATA    64,0A,00
002C4:  DATA    0D,00,00
002C6:  CLR     54
002C8:  MOV     #2D2,W3
002CA:  ADD     W3,W0,W0
002CC:  TBLRDL.B[W0],W0L
002CE:  CLR.B   1
002D0:  RETURN  
002D2:  DATA    70,72,00
002D4:  DATA    65,73,00
002D6:  DATA    73,20,00
002D8:  DATA    61,6E,00
002DA:  DATA    79,20,00
002DC:  DATA    6B,65,00
002DE:  DATA    79,20,00
002E0:  DATA    74,6F,00
002E2:  DATA    20,69,00
002E4:  DATA    6E,69,00
002E6:  DATA    74,69,00
002E8:  DATA    61,74,00
002EA:  DATA    65,20,00
002EC:  DATA    53,50,00
002EE:  DATA    49,20,00
002F0:  DATA    74,72,00
002F2:  DATA    61,6E,00
002F4:  DATA    73,66,00
002F6:  DATA    65,72,00
002F8:  DATA    0A,0D,00
002FA:  DATA    00,00,00
....................  
.................... #list 
....................  
.................... #device ICSP=1 
.................... #use delay(internal=140000000) 
....................  
.................... #FUSES HS, NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOJTAG                   //JTAG disabled 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
....................  
.................... #define SAMPLES 50*3      //Multiplied by 3 
.................... #define SCK   PIN_B7 
.................... #define SDO   PIN_B8 
.................... #define SDI   PIN_B9 
.................... #define CS    PIN_B6 
.................... #define TOGGLE PIN_A0 
.................... #pin_select U1TX=PIN_B11 
.................... #pin_select U1RX=PIN_B12 
.................... #use rs232(UART1, baud=115200, stream=UART_PORT1) 
....................  
.................... #use spi(FORCE_HW, MASTER, SPI1, MODE=1, stream=SPI_PORT1, BAUD = 14000000) 
.................... //IMPORTAnt: Changed to only on a 0 to 5v range 
.................... //!const unsigned int8 Table[SAMPLES] = 
.................... //!{0x80, 0x80, 0x00, 
.................... //!0x20, 0x88, 0x09, 
.................... //!0x20, 0x90, 0x0a, 
.................... //!0x20, 0x97, 0xfc, 
.................... //!0x20, 0x9f, 0xd4, 
.................... //!0x20, 0xa7, 0x8d, 
.................... //!0x20, 0xaf, 0x1e, 
.................... //!0x20, 0xb6, 0x7f, 
.................... //!0x20, 0xbd, 0xa9, 
.................... //!0x20, 0xc4, 0x95, 
.................... //!0x20, 0xcb, 0x3c, 
.................... //!0x20, 0xd1, 0x96, 
.................... //!0x20, 0xd7, 0x9e, 
.................... //!0x20, 0xdd, 0x4e, 
.................... //!0x20, 0xe2, 0x9f, 
.................... //!0x20, 0xe7, 0x8d, 
.................... //!0x20, 0xec, 0x12, 
.................... //!0x20, 0xf0, 0x2a, 
.................... //!0x20, 0xf3, 0xd0, 
.................... //!0x20, 0xf7, 0x02, 
.................... //!0x20, 0xf9, 0xbb, 
.................... //!0x20, 0xfb, 0xfa, 
.................... //!0x20, 0xfd, 0xbb, 
.................... //!0x20, 0xfe, 0xfd, 
.................... //!0x20, 0xff, 0xbe, 
.................... //!0x20, 0xff, 0xff, 
.................... //!0x20, 0xff, 0xbe, 
.................... //!0x20, 0xfe, 0xfd, 
.................... //!0x20, 0xfd, 0xbb, 
.................... //!0x20, 0xfb, 0xfa, 
.................... //!0x20, 0xf9, 0xbb, 
.................... //!0x20, 0xf7, 0x02, 
.................... //!0x20, 0xf3, 0xd0, 
.................... //!0x20, 0xf0, 0x2a, 
.................... //!0x20, 0xec, 0x12, 
.................... //!0x20, 0xe7, 0x8d, 
.................... //!0x20, 0xe2, 0x9f, 
.................... //!0x20, 0xdd, 0x4e, 
.................... //!0x20, 0xd7, 0x9e, 
.................... //!0x20, 0xd1, 0x96, 
.................... //!0x20, 0xcb, 0x3c, 
.................... //!0x20, 0xc4, 0x95, 
.................... //!0x20, 0xbd, 0xa9, 
.................... //!0x20, 0xb6, 0x7f, 
.................... //!0x20, 0xaf, 0x1e, 
.................... //!0x20, 0xa7, 0x8d, 
.................... //!0x20, 0x9f, 0xd4, 
.................... //!0x20, 0x97, 0xfc, 
.................... //!0x20, 0x90, 0x0a, 
.................... //!0x20, 0x88, 0x09, 
.................... //!0x20, 0x80, 0x00, 
.................... //!0x20, 0x77, 0xf6, 
.................... //!0x20, 0x6f, 0xf5, 
.................... //!0x20, 0x68, 0x03, 
.................... //!0x20, 0x60, 0x2b, 
.................... //!0x20, 0x58, 0x72, 
.................... //!0x20, 0x50, 0xe1, 
.................... //!0x20, 0x49, 0x80, 
.................... //!0x20, 0x42, 0x56, 
.................... //!0x20, 0x3b, 0x6a, 
.................... //!0x20, 0x34, 0xc3, 
.................... //!0x20, 0x2e, 0x69, 
.................... //!0x20, 0x28, 0x61, 
.................... //!0x20, 0x22, 0xb1, 
.................... //!0x20, 0x1d, 0x60, 
.................... //!0x20, 0x18, 0x72, 
.................... //!0x20, 0x13, 0xed, 
.................... //!0x20, 0x0f, 0xd5, 
.................... //!0x20, 0x0c, 0x2f, 
.................... //!0x20, 0x08, 0xfd, 
.................... //!0x20, 0x06, 0x44, 
.................... //!0x20, 0x04, 0x05, 
.................... //!0x20, 0x02, 0x44, 
.................... //!0x20, 0x01, 0x02, 
.................... //!0x20, 0x00, 0x41, 
.................... //!0x20, 0x00, 0x00, 
.................... //!0x20, 0x00, 0x41, 
.................... //!0x20, 0x01, 0x02, 
.................... //!0x20, 0x02, 0x44, 
.................... //!0x20, 0x04, 0x05, 
.................... //!0x20, 0x06, 0x44, 
.................... //!0x20, 0x08, 0xfd, 
.................... //!0x20, 0x0c, 0x2f, 
.................... //!0x20, 0x0f, 0xd5, 
.................... //!0x20, 0x13, 0xed, 
.................... //!0x20, 0x18, 0x72, 
.................... //!0x20, 0x1d, 0x60, 
.................... //!0x20, 0x22, 0xb1, 
.................... //!0x20, 0x28, 0x61, 
.................... //!0x20, 0x2e, 0x69, 
.................... //!0x20, 0x34, 0xc3, 
.................... //!0x20, 0x3b, 0x6a, 
.................... //!0x20, 0x42, 0x56, 
.................... //!0x20, 0x49, 0x80, 
.................... //!0x20, 0x50, 0xe1, 
.................... //!0x20, 0x58, 0x72, 
.................... //!0x20, 0x60, 0x2b, 
.................... //!0x20, 0x68, 0x03, 
.................... //!0x20, 0x6f, 0xf5, 
.................... //!0x20, 0x77, 0xf6 
.................... //!}; 
.................... //! 
....................  
.................... //!const unsigned int8 Table[SAMPLES] = 
.................... //!{ 
.................... //!0x80, 0x80, 0x00, 
.................... //!0x20, 0xcb, 0x3c, 
.................... //!0x20, 0xf9, 0xbb, 
.................... //!0x20, 0xf9, 0xbb, 
.................... //!0x20, 0xcb, 0x3c, 
.................... //!0x20, 0x80, 0x00, 
.................... //!0x20, 0x34, 0xc3, 
.................... //!0x20, 0x06, 0x44, 
.................... //!0x20, 0x06, 0x44, 
.................... //!0x20, 0x34, 0xc3 
.................... //!}; 
.................... const unsigned int8 Table[SAMPLES] = 
.................... {0x80, 0x80, 0x00, 
.................... 0x20, 0x90, 0x0a, 
.................... 0x20, 0x9f, 0xd4, 
.................... 0x20, 0xaf, 0x1e, 
.................... 0x20, 0xbd, 0xa9, 
.................... 0x20, 0xcb, 0x3c, 
.................... 0x20, 0xd7, 0x9e, 
.................... 0x20, 0xe2, 0x9f, 
.................... 0x20, 0xec, 0x12, 
.................... 0x20, 0xf3, 0xd0, 
.................... 0x20, 0xf9, 0xbb, 
.................... 0x20, 0xfd, 0xbb, 
.................... 0x20, 0xff, 0xbe, 
.................... 0x20, 0xff, 0xbe, 
.................... 0x20, 0xfd, 0xbb, 
.................... 0x20, 0xf9, 0xbb, 
.................... 0x20, 0xf3, 0xd0, 
.................... 0x20, 0xec, 0x12, 
.................... 0x20, 0xe2, 0x9f, 
.................... 0x20, 0xd7, 0x9e, 
.................... 0x20, 0xcb, 0x3c, 
.................... 0x20, 0xbd, 0xa9, 
.................... 0x20, 0xaf, 0x1e, 
.................... 0x20, 0x9f, 0xd4, 
.................... 0x20, 0x90, 0x0a, 
.................... 0x20, 0x80, 0x00, 
.................... 0x20, 0x6f, 0xf5, 
.................... 0x20, 0x60, 0x2b, 
.................... 0x20, 0x50, 0xe1, 
.................... 0x20, 0x42, 0x56, 
.................... 0x20, 0x34, 0xc3, 
.................... 0x20, 0x28, 0x61, 
.................... 0x20, 0x1d, 0x60, 
.................... 0x20, 0x13, 0xed, 
.................... 0x20, 0x0c, 0x2f, 
.................... 0x20, 0x06, 0x44, 
.................... 0x20, 0x02, 0x44, 
.................... 0x20, 0x00, 0x41, 
.................... 0x20, 0x00, 0x41, 
.................... 0x20, 0x02, 0x44, 
.................... 0x20, 0x06, 0x44, 
.................... 0x20, 0x0c, 0x2f, 
.................... 0x20, 0x13, 0xed, 
.................... 0x20, 0x1d, 0x60, 
.................... 0x20, 0x28, 0x61, 
.................... 0x20, 0x34, 0xc3, 
.................... 0x20, 0x42, 0x56, 
.................... 0x20, 0x50, 0xe1, 
.................... 0x20, 0x60, 0x2b, 
.................... 0x20, 0x6f, 0xf5 
.................... }; 
....................  
....................  
.................... #INT_DMA0 
.................... void  dma0_isr(void)  
002FC:  PUSH    42
002FE:  PUSH    36
00300:  PUSH    54
00302:  MOV     W0,[W15++]
00304:  MOV     #2,W0
00306:  REPEAT  #C
00308:  MOV     [W0++],[W15++]
.................... { 
....................  
.................... } 
....................  
0030A:  BCLR.B  800.4
0030C:  MOV     #1A,W0
0030E:  REPEAT  #C
00310:  MOV     [--W15],[W0--]
00312:  MOV     [--W15],W0
00314:  POP     54
00316:  POP     36
00318:  POP     42
0031A:  RETFIE  
.................... #INT_SPI1 
.................... void  spi1_isr(void)  
0031C:  PUSH    42
0031E:  PUSH    36
00320:  PUSH    54
00322:  MOV     W0,[W15++]
00324:  MOV     #2,W0
00326:  REPEAT  #C
00328:  MOV     [W0++],[W15++]
.................... { 
....................       printf("TRANSFER COMPLETE\n\r"); 
0032A:  MOV     #0,W1
0032C:  MOV     W1,W0
0032E:  CLR.B   1
00330:  CALL    280
00334:  INC     W1,W1
00336:  BTSC.B  223.1
00338:  BRA     336
0033A:  MOV     W0,224
0033C:  MOV     #12,W0
0033E:  CPSGT   W1,W0
00340:  BRA     32C
00342:  BCLR.B  801.2
00344:  MOV     #1A,W0
00346:  REPEAT  #C
00348:  MOV     [--W15],[W0--]
0034A:  MOV     [--W15],W0
0034C:  POP     54
0034E:  POP     36
00350:  POP     42
00352:  RETFIE  
.................... } 
....................  
.................... void main() 
00354:  MOV     #7F80,W15
00356:  MOV     #7FFF,W0
00358:  MOV     W0,20
0035A:  NOP     
0035C:  BSET.B  8C1.7
0035E:  DISI    #6
00360:  MOV     #742,W1
00362:  MOV     #46,W2
00364:  MOV     #57,W3
00366:  MOV.B   W2L,[W1]
00368:  MOV.B   W3L,[W1]
0036A:  BCLR.B  742.6
0036C:  MOV     #2C,W0
0036E:  MOV     W0,6C4
00370:  MOV     #100,W0
00372:  MOV     W0,688
00374:  DISI    #6
00376:  MOV     #742,W1
00378:  MOV     #46,W2
0037A:  MOV     #57,W3
0037C:  MOV.B   W2L,[W1]
0037E:  MOV.B   W3L,[W1]
00380:  BSET.B  742.6
00382:  MOV     #7,W4
00384:  MOV     W4,744
00386:  MOV     #153,W4
00388:  MOV     W4,746
0038A:  CLR     748
0038C:  MOV     #8000,W4
0038E:  MOV     W4,220
00390:  MOV     #400,W4
00392:  MOV     W4,222
00394:  BCLR.B  220.3
00396:  MOV     #25,W4
00398:  MOV     W4,228
0039A:  BCLR.B  241.7
0039C:  BCLR.B  E11.0
0039E:  BSET.B  E11.1
003A0:  BCLR.B  E10.7
003A2:  BCLR.B  240.6
003A4:  MOV     #33,W4
003A6:  MOV     W4,242
003A8:  BSET.B  241.7
003AA:  CLR     E0E
003AC:  CLR     E1E
.................... { 
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H | SPI_SAMPLE_AT_MIDDLE | SPI_SCK_IDLE_HIGH | SPI_MODE_8B | SPI_SS_DISABLED); 
....................    output_low(CS); 
003AE:  BCLR.B  E10.6
003B0:  BCLR.B  E14.6
....................     unsigned int16 i = 0; 
003B2:  CLR     1002
....................    printf("Started Started Started\n\r"); 
003B4:  MOV     #0,W1
003B6:  MOV     W1,W0
003B8:  CLR.B   1
003BA:  CALL    2A0
003BE:  INC     W1,W1
003C0:  BTSC.B  223.1
003C2:  BRA     3C0
003C4:  MOV     W0,224
003C6:  MOV     #18,W0
003C8:  CPSGT   W1,W0
003CA:  BRA     3B6
.................... //!   enable_interrupts(INT_DMA0); 
.................... //!   enable_interrupts(INT_SPI1); 
.................... //!   enable_interrupts(INTR_GLOBAL); 
.................... printf("press any key to initiate SPI transfer\n\r"); 
003CC:  MOV     #0,W1
003CE:  MOV     W1,W0
003D0:  CLR.B   1
003D2:  CALL    2C6
003D6:  INC     W1,W1
003D8:  BTSC.B  223.1
003DA:  BRA     3D8
003DC:  MOV     W0,224
003DE:  MOV     #27,W0
003E0:  CPSGT   W1,W0
003E2:  BRA     3CE
....................       getc(); 
003E4:  BTSS.B  222.0
003E6:  BRA     3E4
003E8:  MOV     226,W0
....................    while(TRUE) 
....................    { 
....................       while(i < SAMPLES) 
003EA:  MOV     1002,W4
003EC:  MOV     #96,W3
003EE:  CP      W3,W4
003F0:  BRA     LEU,460
....................       { 
....................                  output_low(CS); 
003F2:  BCLR.B  E10.6
003F4:  BCLR.B  E14.6
....................                   SPI_WRITE(Table[i]); 
003F6:  MOV     1002,W0
003F8:  CALL    200
003FC:  MOV.B   W0L,W5L
003FE:  BCLR.B  240.6
00400:  BTSS.B  240.0
00402:  BRA     408
00404:  MOV.B   248,W0L
00406:  BRA     400
00408:  PUSH    248
0040A:  MOV.B   W5L,[W15-#2]
0040C:  POP     248
0040E:  BTSS.B  240.0
00410:  BRA     40E
....................                   SPI_WRITE(Table[i+1]); 
00412:  MOV     1002,W4
00414:  ADD     W4,#1,W5
00416:  MOV     W5,W0
00418:  CALL    200
0041C:  MOV.B   W0L,W6L
0041E:  BCLR.B  240.6
00420:  BTSS.B  240.0
00422:  BRA     428
00424:  MOV.B   248,W0L
00426:  BRA     420
00428:  PUSH    248
0042A:  MOV.B   W6L,[W15-#2]
0042C:  POP     248
0042E:  BTSS.B  240.0
00430:  BRA     42E
....................                    SPI_WRITE(Table[i+2]); 
00432:  MOV     1002,W4
00434:  ADD     W4,#2,W5
00436:  MOV     W5,W0
00438:  CALL    200
0043C:  MOV.B   W0L,W6L
0043E:  BCLR.B  240.6
00440:  BTSS.B  240.0
00442:  BRA     448
00444:  MOV.B   248,W0L
00446:  BRA     440
00448:  PUSH    248
0044A:  MOV.B   W6L,[W15-#2]
0044C:  POP     248
0044E:  BTSS.B  240.0
00450:  BRA     44E
....................                    output_high(CS); 
00452:  BCLR.B  E10.6
00454:  BSET.B  E14.6
....................          i += 3; 
00456:  MOV     1002,W4
00458:  ADD     W4,#3,W0
0045A:  MOV     W0,1002
0045C:  GOTO    3EA
....................       } 
....................       i = 0; 
00460:  CLR     1002
00462:  GOTO    3EA
....................    } 
....................  
.................... } 
*
00466:  PWRSAV  #0

Configuration Fuses:
   Word  3L: FFCF   ICSP1 NOJTAG NODEBUG
          H: 0000  
   Word  4L: FFFF   NOALTI2C1 NOALTI2C2 WDTWIN_25%
          H: 0000  
   Word  5L: FF7F   WPOSTS16 WPRES128 PLLWAIT WINDIS NOWDT
          H: 0000  
   Word  6L: FF3A   HS OSCIO IOL1WAY CKSFSM
          H: 0000  
   Word  7L: FFF9   FRC_PLL IESO
          H: 0000  
   Word  8L: FFFF   NOWRT NOPROTECT
          H: 0000  
   Word  9L: FFFF  
          H: 0000  
   Word 10L: FFFF  
          H: 0000  
