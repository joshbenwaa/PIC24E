CCS PCD C Compiler, Version 5.071d, 1               07-Jul-17 12:03
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\joshb\OneDrive - St. Cloud State University\PIC24E\DMA\main_DMA.lst

               ROM used:   824 bytes (0%)
                           Largest free fragment is 65536
               RAM used:   150 (0%) at main() level
                           150 (0%) worst case
               Stack used: 42 locations (2 in main + 40 for interrupts)
               Stack size: 128

*
00000:  GOTO    272
*
0001C:  DATA    1A,02,00
.................... #include <main_DMA.h> 
.................... #include <24EP256GP202.h> 
.................... //////////// Standard Header file for the PIC24EP256GP202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24EP256GP202 
*
00200:  CLR     54
00202:  MOV     #20C,W3
00204:  ADD     W3,W0,W0
00206:  TBLRDL.B[W0],W0L
00208:  CLR.B   1
0020A:  RETURN  
0020C:  DATA    54,52,00
0020E:  DATA    41,4E,00
00210:  DATA    53,46,00
00212:  DATA    45,52,00
00214:  DATA    45,44,00
00216:  DATA    0A,0D,00
00218:  DATA    00,00,00
....................  
.................... #list 
....................  
.................... #device ICSP=1 
.................... #use delay(clock=140MHz,crystal=10MHz) 
*
00252:  CP0     W0
00254:  BTSC.B  42.1
00256:  BRA     270
00258:  REPEAT  #116B
0025A:  NOP     
0025C:  REPEAT  #3FFE
0025E:  NOP     
00260:  REPEAT  #3FFE
00262:  NOP     
00264:  REPEAT  #3FFE
00266:  NOP     
00268:  REPEAT  #3FFE
0026A:  NOP     
0026C:  DEC     W0,W0
0026E:  BRA     NZ,258
00270:  RETURN  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOJTAG                   //JTAG disabled 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
....................  
.................... #pin_select U1TX=PIN_B6 
.................... #pin_select U1RX=PIN_B7 
.................... #use rs232(UART1, baud=9600, stream=UART_PORT1) 
....................  
.................... #BANK_DMA unsigned char Data[21] = "DMA is outputting\n\r"; 
....................  
....................  
.................... #INT_DMA0 
.................... void  dma0_isr(void)  
*
0021A:  PUSH    42
0021C:  PUSH    36
0021E:  PUSH    54
00220:  MOV     W0,[W15++]
00222:  MOV     #2,W0
00224:  REPEAT  #C
00226:  MOV     [W0++],[W15++]
.................... { 
....................    printf("TRANSFERED\n\r"); 
00228:  MOV     #0,W1
0022A:  MOV     W1,W0
0022C:  CLR.B   1
0022E:  CALL    200
00232:  INC     W1,W1
00234:  BTSC.B  223.1
00236:  BRA     234
00238:  MOV     W0,224
0023A:  MOV     #B,W0
0023C:  CPSGT   W1,W0
0023E:  BRA     22A
00240:  BCLR.B  800.4
00242:  MOV     #1A,W0
00244:  REPEAT  #C
00246:  MOV     [--W15],[W0--]
00248:  MOV     [--W15],W0
0024A:  POP     54
0024C:  POP     36
0024E:  POP     42
00250:  RETFIE  
.................... } 
....................  
....................  
....................  
.................... void main() 
*
00272:  MOV     #7F80,W15
00274:  MOV     #7FFF,W0
00276:  MOV     W0,20
00278:  NOP     
0027A:  BSET.B  8C1.7
0027C:  DISI    #6
0027E:  MOV     #742,W1
00280:  MOV     #46,W2
00282:  MOV     #57,W3
00284:  MOV.B   W2L,[W1]
00286:  MOV.B   W3L,[W1]
00288:  BCLR.B  742.6
0028A:  MOV     #27,W0
0028C:  MOV     W0,6C4
0028E:  MOV     #1,W0
00290:  MOV     W0,684
00292:  DISI    #6
00294:  MOV     #742,W1
00296:  MOV     #46,W2
00298:  MOV     #57,W3
0029A:  MOV.B   W2L,[W1]
0029C:  MOV.B   W3L,[W1]
0029E:  BSET.B  742.6
002A0:  CLR     744
002A2:  MOV     #36,W4
002A4:  MOV     W4,746
002A6:  DISI    #E
002A8:  MOV     #103,W0
002AA:  MOV     #743,W1
002AC:  MOV     #78,W2
002AE:  MOV     #9A,W3
002B0:  MOV.B   W2L,[W1]
002B2:  MOV.B   W3L,[W1]
002B4:  MOV.B   W0L,743
002B6:  LSR     W0,#8,W0
002B8:  MOV     #742,W1
002BA:  MOV     #46,W2
002BC:  MOV     #57,W3
002BE:  MOV.B   W2L,[W1]
002C0:  MOV.B   W3L,[W1]
002C2:  MOV.B   W0L,[W1]
002C4:  MOV     #8000,W4
002C6:  MOV     W4,220
002C8:  MOV     #400,W4
002CA:  MOV     W4,222
002CC:  BSET.B  220.3
002CE:  MOV     #71E,W4
002D0:  MOV     W4,228
002D2:  CLR     E0E
002D4:  CLR     E1E
002D6:  MOV     #4D44,W4
002D8:  MOV     W4,1000
002DA:  MOV     #2041,W4
002DC:  MOV     W4,1002
002DE:  MOV     #7369,W4
002E0:  MOV     W4,1004
002E2:  MOV     #6F20,W4
002E4:  MOV     W4,1006
002E6:  MOV     #7475,W4
002E8:  MOV     W4,1008
002EA:  MOV     #7570,W4
002EC:  MOV     W4,100A
002EE:  MOV     #7474,W4
002F0:  MOV     W4,100C
002F2:  MOV     #6E69,W4
002F4:  MOV     W4,100E
002F6:  MOV     #A67,W4
002F8:  MOV     W4,1010
002FA:  MOV     #D,W4
002FC:  MOV     W4,1012
.................... { 
....................    setup_dma(0,DMA_OUT_UART1,DMA_BYTE); 
002FE:  MOV.B   #60,W0L
00300:  MOV.B   W0L,B01
00302:  MOV.B   #C,W0L
00304:  MOV.B   W0L,B02
00306:  MOV     #224,W4
00308:  MOV     W4,B0C
....................    enable_interrupts(INT_DMA0); 
0030A:  BSET.B  820.4
....................    enable_interrupts(INTR_GLOBAL); 
0030C:  BSET.B  8C3.7
....................  
....................    while(TRUE) 
....................    { 
....................      delay_ms(500); 
0030E:  MOV     #1F4,W0
00310:  CALL    252
....................      dma_start(0, DMA_ONE_SHOT | DMA_FORCE_NOW, &Data[0]); //The DMA_FORCE_NOW option causes the transfer to happen immediately, otherwise the DMA waits until the peripheral requests it. 
00314:  BCLR.B  B01.7
00316:  MOV.B   #1,W0L
00318:  MOV.B   W0L,B00
0031A:  MOV     #1000,W4
0031C:  MOV     W4,B04
0031E:  CLR     B06
00320:  BTSS.B  B01.6
00322:  BRA     32A
00324:  MOV     #14,W4
00326:  MOV     W4,B0E
00328:  BRA     32E
0032A:  MOV     #9,W4
0032C:  MOV     W4,B0E
0032E:  BSET.B  B01.7
00330:  BSET.B  B03.7
00332:  GOTO    30E
....................    } 
....................  
.................... } 
*
00336:  PWRSAV  #0

Configuration Fuses:
   Word  3L: FFCF   ICSP1 NOJTAG NODEBUG
          H: 0000  
   Word  4L: FFFF   NOALTI2C1 NOALTI2C2 WDTWIN_25%
          H: 0000  
   Word  5L: FF7F   WPOSTS16 WPRES128 PLLWAIT WINDIS NOWDT
          H: 0000  
   Word  6L: FF3A   HS OSCIO IOL1WAY CKSFSM
          H: 0000  
   Word  7L: FFF8   FRC IESO
          H: 0000  
   Word  8L: FFFF   NOWRT NOPROTECT
          H: 0000  
   Word  9L: FFFF  
          H: 0000  
   Word 10L: FFFF  
          H: 0000  
