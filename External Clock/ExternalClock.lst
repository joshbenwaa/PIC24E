CCS PCD C Compiler, Version 5.071d, 1               18-Jul-17 10:45
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\joshb\OneDrive - St. Cloud State University\PIC24E\External Clock\ExternalClock.lst

               ROM used:   728 bytes (0%)
                           Largest free fragment is 65536
               RAM used:   129 (0%) at main() level
                           129 (0%) worst case
               Stack used: 42 locations (2 in main + 40 for interrupts)
               Stack size: 128

*
00000:  GOTO    274
.................... #include <ExternalClock.h> 
.................... #include <24EP256GP202.h> 
.................... //////////// Standard Header file for the PIC24EP256GP202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24EP256GP202 
*
00200:  CLR     54
00202:  MOV     #20C,W3
00204:  ADD     W3,W0,W0
00206:  TBLRDL.B[W0],W0L
00208:  CLR.B   1
0020A:  RETURN  
0020C:  DATA    4F,53,00
0020E:  DATA    43,20,00
00210:  DATA    46,41,00
00212:  DATA    49,4C,00
00214:  DATA    45,44,00
00216:  DATA    20,0A,00
00218:  DATA    0D,00,00
0021A:  CLR     54
0021C:  MOV     #226,W3
0021E:  ADD     W3,W0,W0
00220:  TBLRDL.B[W0],W0L
00222:  CLR.B   1
00224:  RETURN  
00226:  DATA    42,45,00
00228:  DATA    47,49,00
0022A:  DATA    4E,20,00
0022C:  DATA    42,45,00
0022E:  DATA    47,49,00
00230:  DATA    4E,20,00
00232:  DATA    42,45,00
00234:  DATA    47,49,00
00236:  DATA    4E,20,00
00238:  DATA    0A,0D,00
0023A:  DATA    00,00,00
....................  
.................... #list 
....................  
.................... #device ICSP=1 
.................... #fuses HS, PR, NOWDT 
....................  
.................... #use delay(clock=10000000)  // A 20 Mhz crystal is used 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #pin_select U1TX=PIN_B11 
.................... #pin_select U1RX=PIN_B12 
.................... #use rs232(UART1, baud=9600, stream=UART_PORT1) 
....................  
....................  
....................  
.................... #INT_OSCFAIL 
.................... void  oscfail_isr(void)  
0023C:  PUSH    42
0023E:  PUSH    36
00240:  PUSH    54
00242:  MOV     W0,[W15++]
00244:  MOV     #2,W0
00246:  REPEAT  #C
00248:  MOV     [W0++],[W15++]
.................... { 
....................    printf("OSC FAILED \n\r"); 
0024A:  MOV     #0,W1
0024C:  MOV     W1,W0
0024E:  CLR.B   1
00250:  CALL    200
00254:  INC     W1,W1
00256:  BTSC.B  223.1
00258:  BRA     256
0025A:  MOV     W0,224
0025C:  MOV     #C,W0
0025E:  CPSGT   W1,W0
00260:  BRA     24C
00262:  BCLR.B  8C0.1
00264:  MOV     #1A,W0
00266:  REPEAT  #C
00268:  MOV     [--W15],[W0--]
0026A:  MOV     [--W15],W0
0026C:  POP     54
0026E:  POP     36
00270:  POP     42
00272:  RETFIE  
.................... } 
....................  
....................  
....................  
.................... void main() 
00274:  MOV     #7F80,W15
00276:  MOV     #7FFF,W0
00278:  MOV     W0,20
0027A:  NOP     
0027C:  BSET.B  8C1.7
0027E:  DISI    #6
00280:  MOV     #742,W1
00282:  MOV     #46,W2
00284:  MOV     #57,W3
00286:  MOV.B   W2L,[W1]
00288:  MOV.B   W3L,[W1]
0028A:  BCLR.B  742.6
0028C:  MOV     #2C,W0
0028E:  MOV     W0,6C4
00290:  MOV     #100,W0
00292:  MOV     W0,688
00294:  DISI    #6
00296:  MOV     #742,W1
00298:  MOV     #46,W2
0029A:  MOV     #57,W3
0029C:  MOV.B   W2L,[W1]
0029E:  MOV.B   W3L,[W1]
002A0:  BSET.B  742.6
002A2:  MOV     #8000,W4
002A4:  MOV     W4,220
002A6:  MOV     #400,W4
002A8:  MOV     W4,222
002AA:  BSET.B  220.3
002AC:  MOV     #81,W4
002AE:  MOV     W4,228
002B0:  CLR     E0E
002B2:  CLR     E1E
.................... { 
....................    printf("BEGIN BEGIN BEGIN \n\r"); 
002B4:  MOV     #0,W1
002B6:  MOV     W1,W0
002B8:  CLR.B   1
002BA:  CALL    21A
002BE:  INC     W1,W1
002C0:  BTSC.B  223.1
002C2:  BRA     2C0
002C4:  MOV     W0,224
002C6:  MOV     #13,W0
002C8:  CPSGT   W1,W0
002CA:  BRA     2B6
....................    //setup_oscillator(OSC_RC, 140000000); 
....................    enable_interrupts(INTR_GLOBAL); 
002CC:  BSET.B  8C3.7
....................  
....................    while(TRUE) 
....................    { 
....................       Output_toggle(PIN_A0); 
002CE:  BCLR.B  E00.0
002D0:  BTG.B   E04.0
002D2:  GOTO    2CE
....................    } 
....................  
.................... } 
*
002D6:  PWRSAV  #0

Configuration Fuses:
   Word  3L: FFCF   ICSP1 NOJTAG NODEBUG
          H: 0000  
   Word  4L: FFFF   NOALTI2C1 NOALTI2C2 WDTWIN_25%
          H: 0000  
   Word  5L: FF7F   WPOSTS16 WPRES128 PLLWAIT WINDIS NOWDT
          H: 0000  
   Word  6L: FFFE   HS NOOSCIO IOL1WAY
          H: 0000  
   Word  7L: FFFA   PR IESO
          H: 0000  
   Word  8L: FFFF   NOWRT NOPROTECT
          H: 0000  
   Word  9L: FFFF  
          H: 0000  
   Word 10L: FFFF  
          H: 0000  
