CCS PCD C Compiler, Version 5.071d, 1               10-Aug-17 14:43
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\joshb\OneDrive - St. Cloud State University\PIC24E\DAC\DAC.lst

               ROM used:   1272 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   130 (0%) at main() level
                           138 (0%) worst case
               Stack used: 2 locations
               Stack size: 128

*
00000:  GOTO    436
.................... #include <DAC.h>  
.................... #include <24EP256GP202.h> 
.................... //////////// Standard Header file for the PIC24EP256GP202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24EP256GP202 
*
00200:  CLR     54
00202:  MOV     #66,W3
00204:  SUB     W0,W3,W3
00206:  BRA     C,210
00208:  MOV     #222,W3
0020A:  ADD     W3,W0,W0
0020C:  TBLRDL  [W0],W0
0020E:  RETURN  
00210:  MOV     #222,W0
00212:  BCLR.B  6.0
00214:  ADD     W3,W3,W3
00216:  ADD     W3,W0,W3
00218:  TBLRDH  [W3++],W0
0021A:  TBLRDH  [W3],W3
0021C:  SL      W3,#8,W3
0021E:  IOR      W3,  W0,W0
00220:  RETURN  
00222:  DATA    00,80,20
00224:  DATA    C0,00,00
00226:  DATA    11,95,C8
00228:  DATA    20,00,0A
0022A:  DATA    8F,A9,20
0022C:  DATA    20,00,00
0022E:  DATA    EB,BC,EB
00230:  DATA    20,00,03
00232:  DATA    9E,CE,20
00234:  DATA    20,00,00
00236:  DATA    2B,DE,70
00238:  DATA    20,00,00
0023A:  DATA    27,EB,20
0023C:  DATA    20,00,00
0023E:  DATA    37,F5,70
00240:  DATA    20,00,00
00242:  DATA    14,FC,20
00244:  DATA    20,00,00
00246:  DATA    8F,FF,EB
00248:  DATA    20,00,03
0024A:  DATA    8F,FF,20
0024C:  DATA    20,00,00
0024E:  DATA    14,FC,C8
00250:  DATA    20,00,0A
00252:  DATA    37,F5,20
00254:  DATA    20,00,00
00256:  DATA    27,EB,D8
00258:  DATA    20,00,14
0025A:  DATA    2B,DE,20
0025C:  DATA    20,00,00
0025E:  DATA    9E,CE,D4
00260:  DATA    20,00,21
00262:  DATA    EB,BC,20
00264:  DATA    20,00,00
00266:  DATA    8F,A9,61
00268:  DATA    20,00,31
0026A:  DATA    11,95,20
0026C:  DATA    20,00,00
0026E:  DATA    00,80,14
00270:  DATA    20,00,43
00272:  DATA    EE,6A,20
00274:  DATA    20,00,00
00276:  DATA    70,56,70
00278:  DATA    20,00,56
0027A:  DATA    14,43,20
0027C:  DATA    20,00,00
0027E:  DATA    61,31,EE
00280:  DATA    20,00,6A
00282:  DATA    D4,21,20
00284:  DATA    20,00,00
00286:  DATA    D8,14,00
00288:  CLR     54
0028A:  MOV     #294,W3
0028C:  ADD     W3,W0,W0
0028E:  TBLRDL.B[W0],W0L
00290:  CLR.B   1
00292:  RETURN  
00294:  DATA    53,74,00
00296:  DATA    61,72,00
00298:  DATA    74,65,00
0029A:  DATA    64,20,00
0029C:  DATA    53,74,00
0029E:  DATA    61,72,00
002A0:  DATA    74,65,00
002A2:  DATA    64,20,00
002A4:  DATA    53,74,00
002A6:  DATA    61,72,00
002A8:  DATA    74,65,00
002AA:  DATA    64,0A,00
002AC:  DATA    0D,00,00
002AE:  CLR     54
002B0:  MOV     #2BA,W3
002B2:  ADD     W3,W0,W0
002B4:  TBLRDL.B[W0],W0L
002B6:  CLR.B   1
002B8:  RETURN  
002BA:  DATA    70,72,00
002BC:  DATA    65,73,00
002BE:  DATA    73,20,00
002C0:  DATA    61,6E,00
002C2:  DATA    79,20,00
002C4:  DATA    6B,65,00
002C6:  DATA    79,20,00
002C8:  DATA    74,6F,00
002CA:  DATA    20,69,00
002CC:  DATA    6E,69,00
002CE:  DATA    74,69,00
002D0:  DATA    61,74,00
002D2:  DATA    65,20,00
002D4:  DATA    53,50,00
002D6:  DATA    49,20,00
002D8:  DATA    74,72,00
002DA:  DATA    61,6E,00
002DC:  DATA    73,66,00
002DE:  DATA    65,72,00
002E0:  DATA    0A,0D,00
002E2:  DATA    00,00,00
....................  
.................... #list 
....................  
.................... #device ICSP=1 
.................... #use delay(internal=140000000) 
....................  
.................... #FUSES HS, NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOJTAG                   //JTAG disabled 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
....................  
.................... #use FAST_IO(B) 
.................... #define DELAY 0 
.................... #define SAMPLES 38      //Multiplied by 3 if split 
.................... #define SCK   PIN_B7 
.................... #define SDO   PIN_B8 
.................... #define SDI   PIN_B9 
.................... #define CS    PIN_B6 
.................... #define TOGGLE PIN_A0 
.................... #pin_select U1TX=PIN_B11 
.................... #pin_select U1RX=PIN_B12 
.................... #use rs232(UART1, baud=115200, stream=UART_PORT1) 
....................  
.................... //#use spi(FORCE_HW, MASTER, SPI1, MODE=1, stream=SPI_PORT1, BAUD = 14000000) 
.................... const unsigned int32 Table[SAMPLES] = 
.................... {0xC08000, 
.................... 0x209511, 
.................... 0x20a98f, 
.................... 0x20bceb, 
.................... 0x20ce9e, 
.................... 0x20de2b, 
.................... 0x20eb27, 
.................... 0x20f537, 
.................... 0x20fc14, 
.................... 0x20ff8f, 
.................... 0x20ff8f, 
.................... 0x20fc14, 
.................... 0x20f537, 
.................... 0x20eb27, 
.................... 0x20de2b, 
.................... 0x20ce9e, 
.................... 0x20bceb, 
.................... 0x20a98f, 
.................... 0x209511, 
.................... 0x208000, 
.................... 0x206aee, 
.................... 0x205670, 
.................... 0x204314, 
.................... 0x203161, 
.................... 0x2021d4, 
.................... 0x2014d8, 
.................... 0x200ac8, 
.................... 0x2003eb, 
.................... 0x200070, 
.................... 0x200070, 
.................... 0x2003eb, 
.................... 0x200ac8, 
.................... 0x2014d8, 
.................... 0x2021d4, 
.................... 0x203161, 
.................... 0x204314, 
.................... 0x205670, 
.................... 0x206aee 
.................... }; 
....................  
....................  
.................... void FakeSpiWrite24(int32 value) 
.................... { 
....................       output_low(SCK); 
002E4:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 23)); 
002E6:  BTSC.B  100A.7
002E8:  BRA     2EE
002EA:  BCLR.B  E15.0
002EC:  BRA     2F0
002EE:  BSET.B  E15.0
....................     //  delay_cycles(DELAY); 
....................       output_high(SCK); 
002F0:  BSET.B  E14.7
....................     //  delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
002F2:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 22)); 
002F4:  BTSC.B  100A.6
002F6:  BRA     2FC
002F8:  BCLR.B  E15.0
002FA:  BRA     2FE
002FC:  BSET.B  E15.0
....................     //  delay_cycles(DELAY); 
....................       output_high(SCK); 
002FE:  BSET.B  E14.7
....................      // delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
00300:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 21)); 
00302:  BTSC.B  100A.5
00304:  BRA     30A
00306:  BCLR.B  E15.0
00308:  BRA     30C
0030A:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
0030C:  BSET.B  E14.7
....................     //  delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
0030E:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 20)); 
00310:  BTSC.B  100A.4
00312:  BRA     318
00314:  BCLR.B  E15.0
00316:  BRA     31A
00318:  BSET.B  E15.0
....................   //    delay_cycles(DELAY); 
....................       output_high(SCK); 
0031A:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
0031C:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 19)); 
0031E:  BTSC.B  100A.3
00320:  BRA     326
00322:  BCLR.B  E15.0
00324:  BRA     328
00326:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00328:  BSET.B  E14.7
....................    //   delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
0032A:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 18)); 
0032C:  BTSC.B  100A.2
0032E:  BRA     334
00330:  BCLR.B  E15.0
00332:  BRA     336
00334:  BSET.B  E15.0
....................     //  delay_cycles(DELAY); 
....................       output_high(SCK); 
00336:  BSET.B  E14.7
....................    //   delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
00338:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 17)); 
0033A:  BTSC.B  100A.1
0033C:  BRA     342
0033E:  BCLR.B  E15.0
00340:  BRA     344
00342:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00344:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00346:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 16)); 
00348:  BTSC.B  100A.0
0034A:  BRA     350
0034C:  BCLR.B  E15.0
0034E:  BRA     352
00350:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00352:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00354:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 15)); 
00356:  BTSC.B  1009.7
00358:  BRA     35E
0035A:  BCLR.B  E15.0
0035C:  BRA     360
0035E:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00360:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00362:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 14)); 
00364:  BTSC.B  1009.6
00366:  BRA     36C
00368:  BCLR.B  E15.0
0036A:  BRA     36E
0036C:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
0036E:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00370:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 13)); 
00372:  BTSC.B  1009.5
00374:  BRA     37A
00376:  BCLR.B  E15.0
00378:  BRA     37C
0037A:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
0037C:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
0037E:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 12)); 
00380:  BTSC.B  1009.4
00382:  BRA     388
00384:  BCLR.B  E15.0
00386:  BRA     38A
00388:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
0038A:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
0038C:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 11)); 
0038E:  BTSC.B  1009.3
00390:  BRA     396
00392:  BCLR.B  E15.0
00394:  BRA     398
00396:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00398:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
0039A:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 10)); 
0039C:  BTSC.B  1009.2
0039E:  BRA     3A4
003A0:  BCLR.B  E15.0
003A2:  BRA     3A6
003A4:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003A6:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003A8:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 9)); 
003AA:  BTSC.B  1009.1
003AC:  BRA     3B2
003AE:  BCLR.B  E15.0
003B0:  BRA     3B4
003B2:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003B4:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003B6:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 8)); 
003B8:  BTSC.B  1009.0
003BA:  BRA     3C0
003BC:  BCLR.B  E15.0
003BE:  BRA     3C2
003C0:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003C2:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003C4:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 7)); 
003C6:  BTSC.B  1008.7
003C8:  BRA     3CE
003CA:  BCLR.B  E15.0
003CC:  BRA     3D0
003CE:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003D0:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003D2:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 6)); 
003D4:  BTSC.B  1008.6
003D6:  BRA     3DC
003D8:  BCLR.B  E15.0
003DA:  BRA     3DE
003DC:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003DE:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003E0:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 5)); 
003E2:  BTSC.B  1008.5
003E4:  BRA     3EA
003E6:  BCLR.B  E15.0
003E8:  BRA     3EC
003EA:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003EC:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003EE:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 4)); 
003F0:  BTSC.B  1008.4
003F2:  BRA     3F8
003F4:  BCLR.B  E15.0
003F6:  BRA     3FA
003F8:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003FA:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003FC:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 3)); 
003FE:  BTSC.B  1008.3
00400:  BRA     406
00402:  BCLR.B  E15.0
00404:  BRA     408
00406:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00408:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
0040A:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 2)); 
0040C:  BTSC.B  1008.2
0040E:  BRA     414
00410:  BCLR.B  E15.0
00412:  BRA     416
00414:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00416:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00418:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 1)); 
0041A:  BTSC.B  1008.1
0041C:  BRA     422
0041E:  BCLR.B  E15.0
00420:  BRA     424
00422:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00424:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00426:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 0)); 
00428:  BTSC.B  1008.0
0042A:  BRA     430
0042C:  BCLR.B  E15.0
0042E:  BRA     432
00430:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00432:  BSET.B  E14.7
00434:  RETURN  
....................   //    delay_cycles(DELAY); 
....................    
.................... } 
....................  
.................... void main() 
00436:  MOV     #7F80,W15
00438:  MOV     #7FFF,W0
0043A:  MOV     W0,20
0043C:  NOP     
0043E:  BSET.B  8C1.7
00440:  DISI    #6
00442:  MOV     #742,W1
00444:  MOV     #46,W2
00446:  MOV     #57,W3
00448:  MOV.B   W2L,[W1]
0044A:  MOV.B   W3L,[W1]
0044C:  BCLR.B  742.6
0044E:  MOV     #2C,W0
00450:  MOV     W0,6C4
00452:  MOV     #100,W0
00454:  MOV     W0,688
00456:  DISI    #6
00458:  MOV     #742,W1
0045A:  MOV     #46,W2
0045C:  MOV     #57,W3
0045E:  MOV.B   W2L,[W1]
00460:  MOV.B   W3L,[W1]
00462:  BSET.B  742.6
00464:  MOV     #7,W4
00466:  MOV     W4,744
00468:  MOV     #153,W4
0046A:  MOV     W4,746
0046C:  CLR     748
0046E:  MOV     #8000,W4
00470:  MOV     W4,220
00472:  MOV     #400,W4
00474:  MOV     W4,222
00476:  BCLR.B  220.3
00478:  MOV     #25,W4
0047A:  MOV     W4,228
0047C:  CLR     E0E
0047E:  CLR     E1E
.................... { 
....................    set_tris_b(0); 
00480:  CLR     E10
....................    output_low(CS); 
00482:  BCLR.B  E14.6
....................     unsigned int8 i = 0; 
00484:  CLR.B   1002
....................    printf("Started Started Started\n\r"); 
00486:  MOV     #0,W1
00488:  MOV     W1,W0
0048A:  CLR.B   1
0048C:  CALL    288
00490:  INC     W1,W1
00492:  BTSC.B  223.1
00494:  BRA     492
00496:  MOV     W0,224
00498:  MOV     #18,W0
0049A:  CPSGT   W1,W0
0049C:  BRA     488
.................... printf("press any key to initiate SPI transfer\n\r"); 
0049E:  MOV     #0,W1
004A0:  MOV     W1,W0
004A2:  CLR.B   1
004A4:  CALL    2AE
004A8:  INC     W1,W1
004AA:  BTSC.B  223.1
004AC:  BRA     4AA
004AE:  MOV     W0,224
004B0:  MOV     #27,W0
004B2:  CPSGT   W1,W0
004B4:  BRA     4A0
....................       getc(); 
004B6:  BTSS.B  222.0
004B8:  BRA     4B6
004BA:  MOV     226,W0
....................    while(TRUE) 
....................    { 
....................       while(i < SAMPLES) 
004BC:  MOV     1002,W4
004BE:  MOV     #26,W3
004C0:  CP.B    W3L,W4L
004C2:  BRA     LEU,4F0
....................       { 
....................                    output_low(CS); 
004C4:  BCLR.B  E14.6
....................                    FakeSpiWrite24(Table[i]); 
004C6:  MOV.B   1002,W0L
004C8:  CLR.B   1
004CA:  SL      W0,#2,W0
004CC:  MOV     W0,W2
004CE:  ADD     W0,#2,W0
004D0:  CALL    200
004D4:  MOV     W0,W1
004D6:  MOV     W2,W0
004D8:  CALL    200
004DC:  MOV     W0,W5
004DE:  MOV     W1,W6
004E0:  MOV     W5,1008
004E2:  MOV     W6,100A
004E4:  CALL    2E4
....................                    output_high(CS); 
004E8:  BSET.B  E14.6
....................                     
.................... //!                   if(i < SAMPLES) 
.................... //!                   { 
.................... //!                     i++; 
.................... //!                   } 
.................... //!                   else 
.................... //!                   { 
.................... //!                     i = 0; 
.................... //!                   } 
....................          i++; 
004EA:  INC.B   1002
004EC:  GOTO    4BC
....................       } 
....................       i = 0; 
004F0:  CLR.B   1002
004F2:  GOTO    4BC
....................    } 
....................  
.................... } 
*
004F6:  PWRSAV  #0

Configuration Fuses:
   Word  3L: FFCF   ICSP1 NOJTAG NODEBUG
          H: 0000  
   Word  4L: FFFF   NOALTI2C1 NOALTI2C2 WDTWIN_25%
          H: 0000  
   Word  5L: FF7F   WPOSTS16 WPRES128 PLLWAIT WINDIS NOWDT
          H: 0000  
   Word  6L: FF3A   HS OSCIO IOL1WAY CKSFSM
          H: 0000  
   Word  7L: FFF9   FRC_PLL IESO
          H: 0000  
   Word  8L: FFFF   NOWRT NOPROTECT
          H: 0000  
   Word  9L: FFFF  
          H: 0000  
   Word 10L: FFFF  
          H: 0000  
