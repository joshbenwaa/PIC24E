CCS PCD C Compiler, Version 5.071d, 1               10-Aug-17 13:54
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\joshb\OneDrive - St. Cloud State University\PIC24E\DAC\DAC.lst

               ROM used:   1424 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   130 (0%) at main() level
                           143 (0%) worst case
               Stack used: 42 locations (2 in main + 40 for interrupts)
               Stack size: 128

*
00000:  GOTO    4CE
*
0001C:  DATA    24,03,00
*
00028:  DATA    44,03,00
.................... #include <DAC.h>  
.................... #include <24EP256GP202.h> 
.................... //////////// Standard Header file for the PIC24EP256GP202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24EP256GP202 
*
00200:  CLR     54
00202:  MOV     #86,W3
00204:  SUB     W0,W3,W3
00206:  BRA     C,210
00208:  MOV     #222,W3
0020A:  ADD     W3,W0,W0
0020C:  TBLRDL  [W0],W0
0020E:  RETURN  
00210:  MOV     #222,W0
00212:  BCLR.B  6.0
00214:  ADD     W3,W3,W3
00216:  ADD     W3,W0,W3
00218:  TBLRDH  [W3++],W0
0021A:  TBLRDH  [W3],W3
0021C:  SL      W3,#8,W3
0021E:  IOR      W3,  W0,W0
00220:  RETURN  
00222:  DATA    00,80,20
00224:  DATA    80,00,00
00226:  DATA    0A,90,2F
00228:  DATA    20,00,0C
0022A:  DATA    D4,9F,20
0022C:  DATA    20,00,00
0022E:  DATA    1E,AF,44
00230:  DATA    20,00,06
00232:  DATA    A9,BD,20
00234:  DATA    20,00,00
00236:  DATA    3C,CB,44
00238:  DATA    20,00,02
0023A:  DATA    9E,D7,20
0023C:  DATA    20,00,00
0023E:  DATA    9F,E2,41
00240:  DATA    20,00,00
00242:  DATA    12,EC,20
00244:  DATA    20,00,00
00246:  DATA    D0,F3,41
00248:  DATA    20,00,00
0024A:  DATA    BB,F9,20
0024C:  DATA    20,00,00
0024E:  DATA    BB,FD,44
00250:  DATA    20,00,02
00252:  DATA    BE,FF,20
00254:  DATA    20,00,00
00256:  DATA    BE,FF,44
00258:  DATA    20,00,06
0025A:  DATA    BB,FD,20
0025C:  DATA    20,00,00
0025E:  DATA    BB,F9,2F
00260:  DATA    20,00,0C
00262:  DATA    D0,F3,20
00264:  DATA    20,00,00
00266:  DATA    12,EC,ED
00268:  DATA    20,00,13
0026A:  DATA    9F,E2,20
0026C:  DATA    20,00,00
0026E:  DATA    9E,D7,60
00270:  DATA    20,00,1D
00272:  DATA    3C,CB,20
00274:  DATA    20,00,00
00276:  DATA    A9,BD,61
00278:  DATA    20,00,28
0027A:  DATA    1E,AF,20
0027C:  DATA    20,00,00
0027E:  DATA    D4,9F,C3
00280:  DATA    20,00,34
00282:  DATA    0A,90,20
00284:  DATA    20,00,00
00286:  DATA    00,80,56
00288:  DATA    20,00,42
0028A:  DATA    F5,6F,20
0028C:  DATA    20,00,00
0028E:  DATA    2B,60,E1
00290:  DATA    20,00,50
00292:  DATA    E1,50,20
00294:  DATA    20,00,00
00296:  DATA    56,42,2B
00298:  DATA    20,00,60
0029A:  DATA    C3,34,20
0029C:  DATA    20,00,00
0029E:  DATA    61,28,F5
002A0:  DATA    20,00,6F
002A2:  DATA    60,1D,20
002A4:  DATA    20,00,00
002A6:  DATA    ED,13,00
002A8:  CLR     54
002AA:  MOV     #2B4,W3
002AC:  ADD     W3,W0,W0
002AE:  TBLRDL.B[W0],W0L
002B0:  CLR.B   1
002B2:  RETURN  
002B4:  DATA    54,52,00
002B6:  DATA    41,4E,00
002B8:  DATA    53,46,00
002BA:  DATA    45,52,00
002BC:  DATA    20,43,00
002BE:  DATA    4F,4D,00
002C0:  DATA    50,4C,00
002C2:  DATA    45,54,00
002C4:  DATA    45,0A,00
002C6:  DATA    0D,00,00
002C8:  CLR     54
002CA:  MOV     #2D4,W3
002CC:  ADD     W3,W0,W0
002CE:  TBLRDL.B[W0],W0L
002D0:  CLR.B   1
002D2:  RETURN  
002D4:  DATA    53,74,00
002D6:  DATA    61,72,00
002D8:  DATA    74,65,00
002DA:  DATA    64,20,00
002DC:  DATA    53,74,00
002DE:  DATA    61,72,00
002E0:  DATA    74,65,00
002E2:  DATA    64,20,00
002E4:  DATA    53,74,00
002E6:  DATA    61,72,00
002E8:  DATA    74,65,00
002EA:  DATA    64,0A,00
002EC:  DATA    0D,00,00
002EE:  CLR     54
002F0:  MOV     #2FA,W3
002F2:  ADD     W3,W0,W0
002F4:  TBLRDL.B[W0],W0L
002F6:  CLR.B   1
002F8:  RETURN  
002FA:  DATA    70,72,00
002FC:  DATA    65,73,00
002FE:  DATA    73,20,00
00300:  DATA    61,6E,00
00302:  DATA    79,20,00
00304:  DATA    6B,65,00
00306:  DATA    79,20,00
00308:  DATA    74,6F,00
0030A:  DATA    20,69,00
0030C:  DATA    6E,69,00
0030E:  DATA    74,69,00
00310:  DATA    61,74,00
00312:  DATA    65,20,00
00314:  DATA    53,50,00
00316:  DATA    49,20,00
00318:  DATA    74,72,00
0031A:  DATA    61,6E,00
0031C:  DATA    73,66,00
0031E:  DATA    65,72,00
00320:  DATA    0A,0D,00
00322:  DATA    00,00,00
....................  
.................... #list 
....................  
.................... #device ICSP=1 
.................... #use delay(internal=140000000) 
....................  
.................... #FUSES HS, NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOJTAG                   //JTAG disabled 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
....................  
.................... #use FAST_IO(B) 
.................... #define DELAY 0 
.................... #define SAMPLES 50      //Multiplied by 3 if split 
.................... #define SCK   PIN_B7 
.................... #define SDO   PIN_B8 
.................... #define SDI   PIN_B9 
.................... #define CS    PIN_B6 
.................... #define TOGGLE PIN_A0 
.................... #pin_select U1TX=PIN_B11 
.................... #pin_select U1RX=PIN_B12 
.................... #use rs232(UART1, baud=115200, stream=UART_PORT1) 
....................  
.................... //#use spi(FORCE_HW, MASTER, SPI1, MODE=1, stream=SPI_PORT1, BAUD = 14000000) 
.................... const unsigned int32 Table[SAMPLES] = 
.................... {0x808000, 
.................... 0x20900a, 
.................... 0x209fd4, 
.................... 0x20af1e, 
.................... 0x20bda9, 
.................... 0x20cb3c, 
.................... 0x20d79e, 
.................... 0x20e29f, 
.................... 0x20ec12, 
.................... 0x20f3d0, 
.................... 0x20f9bb, 
.................... 0x20fdbb, 
.................... 0x20ffbe, 
.................... 0x20ffbe, 
.................... 0x20fdbb, 
.................... 0x20f9bb, 
.................... 0x20f3d0, 
.................... 0x20ec12, 
.................... 0x20e29f, 
.................... 0x20d79e, 
.................... 0x20cb3c, 
.................... 0x20bda9, 
.................... 0x20af1e, 
.................... 0x209fd4, 
.................... 0x20900a, 
.................... 0x208000, 
.................... 0x206ff5, 
.................... 0x20602b, 
.................... 0x2050e1, 
.................... 0x204256, 
.................... 0x2034c3, 
.................... 0x202861, 
.................... 0x201d60, 
.................... 0x2013ed, 
.................... 0x200c2f, 
.................... 0x200644, 
.................... 0x200244, 
.................... 0x200041, 
.................... 0x200041, 
.................... 0x200244, 
.................... 0x200644, 
.................... 0x200c2f, 
.................... 0x2013ed, 
.................... 0x201d60, 
.................... 0x202861, 
.................... 0x2034c3, 
.................... 0x204256, 
.................... 0x2050e1, 
.................... 0x20602b, 
.................... 0x206ff5 
.................... }; 
....................  
....................  
.................... #INT_DMA0 
.................... void  dma0_isr(void)  
00324:  PUSH    42
00326:  PUSH    36
00328:  PUSH    54
0032A:  MOV     W0,[W15++]
0032C:  MOV     #2,W0
0032E:  REPEAT  #C
00330:  MOV     [W0++],[W15++]
.................... { 
....................  
.................... } 
....................  
00332:  BCLR.B  800.4
00334:  MOV     #1A,W0
00336:  REPEAT  #C
00338:  MOV     [--W15],[W0--]
0033A:  MOV     [--W15],W0
0033C:  POP     54
0033E:  POP     36
00340:  POP     42
00342:  RETFIE  
.................... #INT_SPI1 
.................... void  spi1_isr(void)  
00344:  PUSH    42
00346:  PUSH    36
00348:  PUSH    54
0034A:  MOV     W0,[W15++]
0034C:  MOV     #2,W0
0034E:  REPEAT  #C
00350:  MOV     [W0++],[W15++]
.................... { 
....................       printf("TRANSFER COMPLETE\n\r"); 
00352:  MOV     #0,W1
00354:  MOV     W1,W0
00356:  CLR.B   1
00358:  CALL    2A8
0035C:  INC     W1,W1
0035E:  BTSC.B  223.1
00360:  BRA     35E
00362:  MOV     W0,224
00364:  MOV     #12,W0
00366:  CPSGT   W1,W0
00368:  BRA     354
0036A:  BCLR.B  801.2
0036C:  MOV     #1A,W0
0036E:  REPEAT  #C
00370:  MOV     [--W15],[W0--]
00372:  MOV     [--W15],W0
00374:  POP     54
00376:  POP     36
00378:  POP     42
0037A:  RETFIE  
.................... } 
....................  
.................... void FakeSpiWrite24(int32 value) 
.................... { 
....................       output_low(SCK); 
0037C:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 23)); 
0037E:  BTSC.B  100A.7
00380:  BRA     386
00382:  BCLR.B  E15.0
00384:  BRA     388
00386:  BSET.B  E15.0
....................     //  delay_cycles(DELAY); 
....................       output_high(SCK); 
00388:  BSET.B  E14.7
....................     //  delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
0038A:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 22)); 
0038C:  BTSC.B  100A.6
0038E:  BRA     394
00390:  BCLR.B  E15.0
00392:  BRA     396
00394:  BSET.B  E15.0
....................     //  delay_cycles(DELAY); 
....................       output_high(SCK); 
00396:  BSET.B  E14.7
....................      // delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
00398:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 21)); 
0039A:  BTSC.B  100A.5
0039C:  BRA     3A2
0039E:  BCLR.B  E15.0
003A0:  BRA     3A4
003A2:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003A4:  BSET.B  E14.7
....................     //  delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
003A6:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 20)); 
003A8:  BTSC.B  100A.4
003AA:  BRA     3B0
003AC:  BCLR.B  E15.0
003AE:  BRA     3B2
003B0:  BSET.B  E15.0
....................   //    delay_cycles(DELAY); 
....................       output_high(SCK); 
003B2:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
003B4:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 19)); 
003B6:  BTSC.B  100A.3
003B8:  BRA     3BE
003BA:  BCLR.B  E15.0
003BC:  BRA     3C0
003BE:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003C0:  BSET.B  E14.7
....................    //   delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
003C2:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 18)); 
003C4:  BTSC.B  100A.2
003C6:  BRA     3CC
003C8:  BCLR.B  E15.0
003CA:  BRA     3CE
003CC:  BSET.B  E15.0
....................     //  delay_cycles(DELAY); 
....................       output_high(SCK); 
003CE:  BSET.B  E14.7
....................    //   delay_cycles(DELAY); 
....................        
....................       output_low(SCK); 
003D0:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 17)); 
003D2:  BTSC.B  100A.1
003D4:  BRA     3DA
003D6:  BCLR.B  E15.0
003D8:  BRA     3DC
003DA:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003DC:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003DE:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 16)); 
003E0:  BTSC.B  100A.0
003E2:  BRA     3E8
003E4:  BCLR.B  E15.0
003E6:  BRA     3EA
003E8:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003EA:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003EC:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 15)); 
003EE:  BTSC.B  1009.7
003F0:  BRA     3F6
003F2:  BCLR.B  E15.0
003F4:  BRA     3F8
003F6:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
003F8:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
003FA:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 14)); 
003FC:  BTSC.B  1009.6
003FE:  BRA     404
00400:  BCLR.B  E15.0
00402:  BRA     406
00404:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00406:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00408:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 13)); 
0040A:  BTSC.B  1009.5
0040C:  BRA     412
0040E:  BCLR.B  E15.0
00410:  BRA     414
00412:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00414:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00416:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 12)); 
00418:  BTSC.B  1009.4
0041A:  BRA     420
0041C:  BCLR.B  E15.0
0041E:  BRA     422
00420:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00422:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00424:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 11)); 
00426:  BTSC.B  1009.3
00428:  BRA     42E
0042A:  BCLR.B  E15.0
0042C:  BRA     430
0042E:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00430:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00432:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 10)); 
00434:  BTSC.B  1009.2
00436:  BRA     43C
00438:  BCLR.B  E15.0
0043A:  BRA     43E
0043C:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
0043E:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00440:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 9)); 
00442:  BTSC.B  1009.1
00444:  BRA     44A
00446:  BCLR.B  E15.0
00448:  BRA     44C
0044A:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
0044C:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
0044E:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 8)); 
00450:  BTSC.B  1009.0
00452:  BRA     458
00454:  BCLR.B  E15.0
00456:  BRA     45A
00458:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
0045A:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
0045C:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 7)); 
0045E:  BTSC.B  1008.7
00460:  BRA     466
00462:  BCLR.B  E15.0
00464:  BRA     468
00466:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00468:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
0046A:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 6)); 
0046C:  BTSC.B  1008.6
0046E:  BRA     474
00470:  BCLR.B  E15.0
00472:  BRA     476
00474:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00476:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00478:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 5)); 
0047A:  BTSC.B  1008.5
0047C:  BRA     482
0047E:  BCLR.B  E15.0
00480:  BRA     484
00482:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00484:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00486:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 4)); 
00488:  BTSC.B  1008.4
0048A:  BRA     490
0048C:  BCLR.B  E15.0
0048E:  BRA     492
00490:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
00492:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
00494:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 3)); 
00496:  BTSC.B  1008.3
00498:  BRA     49E
0049A:  BCLR.B  E15.0
0049C:  BRA     4A0
0049E:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
004A0:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
004A2:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 2)); 
004A4:  BTSC.B  1008.2
004A6:  BRA     4AC
004A8:  BCLR.B  E15.0
004AA:  BRA     4AE
004AC:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
004AE:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
004B0:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 1)); 
004B2:  BTSC.B  1008.1
004B4:  BRA     4BA
004B6:  BCLR.B  E15.0
004B8:  BRA     4BC
004BA:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
004BC:  BSET.B  E14.7
....................   //    delay_cycles(DELAY); 
....................    
....................         output_low(SCK); 
004BE:  BCLR.B  E14.7
....................       output_bit(SDO, bit_test(value, 0)); 
004C0:  BTSC.B  1008.0
004C2:  BRA     4C8
004C4:  BCLR.B  E15.0
004C6:  BRA     4CA
004C8:  BSET.B  E15.0
....................    //   delay_cycles(DELAY); 
....................       output_high(SCK); 
004CA:  BSET.B  E14.7
004CC:  RETURN  
....................   //    delay_cycles(DELAY); 
....................    
.................... } 
....................  
.................... void main() 
004CE:  MOV     #7F80,W15
004D0:  MOV     #7FFF,W0
004D2:  MOV     W0,20
004D4:  NOP     
004D6:  BSET.B  8C1.7
004D8:  DISI    #6
004DA:  MOV     #742,W1
004DC:  MOV     #46,W2
004DE:  MOV     #57,W3
004E0:  MOV.B   W2L,[W1]
004E2:  MOV.B   W3L,[W1]
004E4:  BCLR.B  742.6
004E6:  MOV     #2C,W0
004E8:  MOV     W0,6C4
004EA:  MOV     #100,W0
004EC:  MOV     W0,688
004EE:  DISI    #6
004F0:  MOV     #742,W1
004F2:  MOV     #46,W2
004F4:  MOV     #57,W3
004F6:  MOV.B   W2L,[W1]
004F8:  MOV.B   W3L,[W1]
004FA:  BSET.B  742.6
004FC:  MOV     #7,W4
004FE:  MOV     W4,744
00500:  MOV     #153,W4
00502:  MOV     W4,746
00504:  CLR     748
00506:  MOV     #8000,W4
00508:  MOV     W4,220
0050A:  MOV     #400,W4
0050C:  MOV     W4,222
0050E:  BCLR.B  220.3
00510:  MOV     #25,W4
00512:  MOV     W4,228
00514:  CLR     E0E
00516:  CLR     E1E
.................... { 
....................    set_tris_b(0); 
00518:  CLR     E10
....................    output_low(CS); 
0051A:  BCLR.B  E14.6
....................     unsigned int8 i = 0; 
0051C:  CLR.B   1002
....................    printf("Started Started Started\n\r"); 
0051E:  MOV     #0,W1
00520:  MOV     W1,W0
00522:  CLR.B   1
00524:  CALL    2C8
00528:  INC     W1,W1
0052A:  BTSC.B  223.1
0052C:  BRA     52A
0052E:  MOV     W0,224
00530:  MOV     #18,W0
00532:  CPSGT   W1,W0
00534:  BRA     520
.................... printf("press any key to initiate SPI transfer\n\r"); 
00536:  MOV     #0,W1
00538:  MOV     W1,W0
0053A:  CLR.B   1
0053C:  CALL    2EE
00540:  INC     W1,W1
00542:  BTSC.B  223.1
00544:  BRA     542
00546:  MOV     W0,224
00548:  MOV     #27,W0
0054A:  CPSGT   W1,W0
0054C:  BRA     538
....................       getc(); 
0054E:  BTSS.B  222.0
00550:  BRA     54E
00552:  MOV     226,W0
....................    while(TRUE) 
....................    { 
....................       while(i < SAMPLES) 
00554:  MOV     1002,W4
00556:  MOV     #32,W3
00558:  CP.B    W3L,W4L
0055A:  BRA     LEU,588
....................       { 
....................                  output_low(CS); 
0055C:  BCLR.B  E14.6
....................                   FakeSpiWrite24(Table[i]); 
0055E:  MOV.B   1002,W0L
00560:  CLR.B   1
00562:  SL      W0,#2,W0
00564:  MOV     W0,W2
00566:  ADD     W0,#2,W0
00568:  CALL    200
0056C:  MOV     W0,W1
0056E:  MOV     W2,W0
00570:  CALL    200
00574:  MOV     W0,W5
00576:  MOV     W1,W6
00578:  MOV     W5,1008
0057A:  MOV     W6,100A
0057C:  CALL    37C
....................                    output_high(CS); 
00580:  BSET.B  E14.6
....................          i++; 
00582:  INC.B   1002
00584:  GOTO    554
....................       } 
....................       i = 0; 
00588:  CLR.B   1002
0058A:  GOTO    554
....................    } 
....................  
.................... } 
*
0058E:  PWRSAV  #0

Configuration Fuses:
   Word  3L: FFCF   ICSP1 NOJTAG NODEBUG
          H: 0000  
   Word  4L: FFFF   NOALTI2C1 NOALTI2C2 WDTWIN_25%
          H: 0000  
   Word  5L: FF7F   WPOSTS16 WPRES128 PLLWAIT WINDIS NOWDT
          H: 0000  
   Word  6L: FF3A   HS OSCIO IOL1WAY CKSFSM
          H: 0000  
   Word  7L: FFF9   FRC_PLL IESO
          H: 0000  
   Word  8L: FFFF   NOWRT NOPROTECT
          H: 0000  
   Word  9L: FFFF  
          H: 0000  
   Word 10L: FFFF  
          H: 0000  
